# for example, create a new site with the anatole theme
blogdown::new_site(theme = 'ojroques/researcher')
# for example, create a new site with the anatole theme
blogdown::new_site(theme = 'researcher')
# for example, create a new site with the anatole theme
blogdown::new_site(theme = 'ojroques/hugo-researcher')
# for example, create a new site with the anatole theme
blogdown::new_site(theme = 'ojroques/hugo-researcher')
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown::stop_server()
blogdown::serve_site()
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
library(ggmap)
## cities:
cities_location <- data.frame(location = c("Passo Fundo, Brazil",
"Buenos Aires, Argentina",
"Assuncion, Paraguay",
"Campinas, Brazil",
"Cubatao, Brazil",
"Mendoza, Argentina",
"Corrientes, Argentina",
"Porto Velho, Brazil",
"Manaus, Brazil",
"Santa Cruz de La Sierra, Bolivia",
"Belo Horizonte, Brazil",
"Brasília, Brazil",
"Rio de Janeiro, Brazil",
"Campo Grande, Brazil",
"Recife, Brazil"),
stringsAsFactors = FALSE)
## get latitude and longitude
geo_location <- geocode(cities_location$location, source = "google")
?register_google
## register API
register_google(key = "AIzaSyD53SPS9dKOvf8HqmBir-6R1Xnu4q1baSk")
## get latitude and longitude
geo_location <- geocode(cities_location$location, source = "google")
## get latitude and longitude
geo_location <- geocode(cities_location$location, source = "google")
cities_location
geo_location <- mutate_geocode(cities_location, place)
geo_location <- mutate_geocode(cities_location$location, place)
## register API
register_google(key = "AIzaSyD53SPS9dKOvf8HqmBir-6R1Xnu4q1baSk")
## get latitude and longitude
geo_location <- geocode(cities_location$location)
geo_location
## register API
register_google(key = "AIzaSyD53SPS9dKOvf8HqmBir-6R1Xnu4q1baSk")
## get latitude and longitude
geo_location <- geocode(cities_location$location)
## get latitude and longitude
geo_location <- geocode(cities_location$location)
## register API
register_google(key = "AIzaSyD53SPS9dKOvf8HqmBir-6R1Xnu4q1baSk")
## get latitude and longitude
geo_location <- geocode(cities_location$location)
library(ggmap)
## cities:
cities_location <- data.frame(location = c("Passo Fundo, Brazil",
"Buenos Aires, Argentina",
"Assuncion, Paraguay",
"Campinas, Brazil",
"Cubatao, Brazil",
"Mendoza, Argentina",
"Corrientes, Argentina",
"Porto Velho, Brazil",
"Manaus, Brazil",
"Santa Cruz de La Sierra, Bolivia",
"Belo Horizonte, Brazil",
"Brasília, Brazil",
"Rio de Janeiro, Brazil",
"Campo Grande, Brazil",
"Recife, Brazil"),
stringsAsFactors = FALSE)
## register API
register_google(key = "AIzaSyD53SPS9dKOvf8HqmBir-6R1Xnu4q1baSk")
## get latitude and longitude
geo_location <- geocode(cities_location$location)
## combine data:
df_location <- cbind(cities_location, geo_location)
blogdown:::preview_site(startup = TRUE)
library(ggmap)
library(ggmap)
## cities:
cities_location <- data.frame(location = c("Passo Fundo, Brazil",
"Buenos Aires, Argentina",
"Assuncion, Paraguay",
"Campinas, Brazil",
"Cubatao, Brazil",
"Mendoza, Argentina",
"Corrientes, Argentina",
"Porto Velho, Brazil",
"Manaus, Brazil",
"Santa Cruz de La Sierra, Bolivia",
"Belo Horizonte, Brazil",
"Brasília, Brazil",
"Rio de Janeiro, Brazil",
"Campo Grande, Brazil",
"Recife, Brazil"),
stringsAsFactors = FALSE)
## register API
register_google(key = "AIzaSyD53SPS9dKOvf8HqmBir-6R1Xnu4q1baSk")
## get latitude and longitude
geo_location <- geocode(cities_location$location)
## get latitude and longitude
geo_location <- geocode(cities_location$location)
library(ggmap)
## cities:
cities_location <- data.frame(location = c("Passo Fundo, Brazil",
"Buenos Aires, Argentina",
"Assuncion, Paraguay",
"Campinas, Brazil",
"Cubatao, Brazil",
"Mendoza, Argentina",
"Corrientes, Argentina",
"Porto Velho, Brazil",
"Manaus, Brazil",
"Santa Cruz de La Sierra, Bolivia",
"Belo Horizonte, Brazil",
"Brasília, Brazil",
"Rio de Janeiro, Brazil",
"Campo Grande, Brazil",
"Recife, Brazil"),
stringsAsFactors = FALSE)
## register API
register_google(key = "AIzaSyARIvXzrUcbXVVD1JoUr2xzomD8RLaPBOQ")
## get latitude and longitude
geo_location <- geocode(cities_location$location)
## cities:
cities_location <- data.frame(location = c("Passo Fundo, Brazil",
"Buenos Aires, Argentina",
"Assuncion, Paraguay",
"Campinas, Brazil",
"Cubatao, Brazil",
"Mendoza, Argentina",
"Corrientes, Argentina",
"Porto Velho, Brazil",
"Manaus, Brazil",
"Santa Cruz de La Sierra, Bolivia",
"Belo Horizonte, Brazil",
"Brasília, Brazil",
"Rio de Janeiro, Brazil",
"Campo Grande, Brazil",
"Recife, Brazil"),
stringsAsFactors = FALSE)
## register API
register_google(key = "AIzaSyARIvXzrUcbXVVD1JoUr2xzomD8RLaPBOQ")
## get latitude and longitude
geo_location <- geocode(cities_location$location)
## register API
register_google(key = "AIzaSyARIvXzrUcbXVVD1JoUr2xzomD8RLaPBOQ")
## get latitude and longitude
geo_location <- geocode(cities_location$location)
## get latitude and longitude
geo_location <- geocode(cities_location$location)
library(ggmap)
## cities:
cities_location <- data.frame(location = c("Passo Fundo, Brazil",
"Buenos Aires, Argentina",
"Assuncion, Paraguay",
"Campinas, Brazil",
"Cubatao, Brazil",
"Mendoza, Argentina",
"Corrientes, Argentina",
"Porto Velho, Brazil",
"Manaus, Brazil",
"Santa Cruz de La Sierra, Bolivia",
"Belo Horizonte, Brazil",
"Brasília, Brazil",
"Rio de Janeiro, Brazil",
"Campo Grande, Brazil",
"Recife, Brazil"),
stringsAsFactors = FALSE)
## register API
register_google(key = "AIzaSyARIvXzrUcbXVVD1JoUr2xzomD8RLaPBOQ")
## get latitude and longitude
geo_location <- geocode(cities_location$location)
geo_location
## cities:
cities_location <- data.frame(location = c("Passo Fundo, Brazil",
"Buenos Aires, Argentina",
"Assuncion, Paraguay",
"Campinas, Brazil",
"Cubatao, Brazil",
"Mendoza, Argentina",
"Corrientes, Argentina",
"Porto Velho, Brazil",
"Manaus, Brazil",
"Santa Cruz de La Sierra, Bolivia",
"Belo Horizonte, Brazil",
"Brasília, Brazil",
"Rio de Janeiro, Brazil",
"Campo Grande, Brazil",
"Recife, Brazil"),
stringsAsFactors = FALSE)
cities_location
## get latitude and longitude
geo_location <- geocode(cities_location$location)
## artificial data for 3D plots:
n = 99
set.seed(1984)
d1<-matrix(rnorm(n,mean=-2,sd=.5), n/3, 3) # 3d
d2<-matrix(rnorm(n,mean=0,sd=.3), n/3, 3)
d3<-matrix(rnorm(n,mean=3,sd=.4), n/3, 3)
d<-rbind(d1,d2,d3) # just to show a matrix input
## MST:
library(emstreeR)
out <- ComputeMST(d, verbose = FALSE)
## simple 3D plot:
plotMST3D(out, xlab = "xaxis", main="Just a MST 3D plot")
# some adjusts needed
ord_id <- Reduce(rbind, rbind(t(out[, c("from", "to")]), NA))
ord_data <- out[ord_id, c("X1", "X2", "X3")]
ord_id
out
# some adjusts needed
ord_id <- Reduce(rbind, rbind(t(out[, c("from", "to")]), NA))
ord_data <- out[ord_id, c("V1", "V2", "vV3")]
ord_id
out[, c("from", "to")]
t(out[, c("from", "to")])
rbind(t(out[, c("from", "to")]), NA)
Reduce(rbind, rbind(t(out[, c("from", "to")]), NA))
# some adjusts needed
ord_id <- Reduce(cbind, rbind(t(out[, c("from", "to")]), NA))
ord_id
rbind(t(out[, c("from", "to")]), NA)
out[, c("from", "to")]
rbind(t(out[, c("from", "to")])
rbind(t(out[, c("from", "to")]), NA)
rbind(t(out[, c("from", "to")]), NA)
rbind((out[, c("from", "to")]), NA))
rbind((out[, c("from", "to")]), NA)
rbind((out[, c("from", "to")]), NA)
t(out[, c("from", "to")]), NA)
t(out[, c("from", "to")]), NA)
t(out[, c("from", "to")]), NA))
# some adjusts needed
ord_id <- Reduce(rbind, rbind(t(out[, c("from", "to")]), NA))
ord_id
out
t(out[, c("from", "to")]), NA)
t(out[, c("from", "to")])
rbind(t(out[, c("from", "to")]), NA)
cbind(t(out[, c("from", "to")]), NA)
rbind(t(out[, c("from", "to")]), NA)
Reduce(c, rbind(t(out[, c("from", "to")]), NA))
# some adjusts needed
ord_id <- Reduce(c, rbind(t(out[, c("from", "to")]), NA))
rbind(t(out[, c("from", "to")]), NA)
list(t(out[, c("from", "to")]), NA)
n=99
d1<-matrix(rnorm(n,mean=-7,sd=1), n/3, 3)
d2<-matrix(rnorm(n,mean=0,sd=1), n/3, 3)
d3<-matrix(rnorm(n,mean=7,sd=1), n/3, 3)
d<-rbind(d1,d2,d3)
pca<-princomp(d)
str(pca)
mx<-min(pca$scores[,1]) # menor valor de x no espaço transformado
Mx<-max(pca$scores[,1]) # maior valor de x no espaço transformado
my<-min(pca$scores[,2]) # menor valor de y no espaço transformado
My<-max(pca$scores[,2]) # maior valor de y no espaço transformado
mz<-min(pca$scores[,3]) # menor valor de y no espaço transformado
Mz<-max(pca$scores[,3]) # maior valor de y no espaço transformado
simx<-runif(10*n/3,mx,Mx) # uniforme entre mx e Mx
simy<-runif(10*n/3,my,My) # uniforme entre my e My
simz<-runif(10*n/3,mz,Mz) # uniforme entre my e My
simd<-t(rbind(simx,simy, simz))
simd<-simd %*% t(pca$loadings) + pca$center # transformando para o espaço original
# ANTES NO LINUX PARA FUNCIONAR O PLOTLY:
# sudo apt-get install libssl-dev
# sudo apt-get install libcurl4-openssl-dev
# install.packages("openssl")
# install.packages("libcurl")
# install.packages("curl")
# install.packages("httr")
# install.packages("plotly")
library(plotly)
# PLOT 3D
p <- plot_ly(as.data.frame(d), x = d[,1], y = d[,2], z = d[,3])
# ou melhor (COM LAYERING)
# https://plot.ly/r/graphing-multiple-chart-types/
p <- plot_ly(as.data.frame(d)) %>%
add_trace(x = d[,1], y = d[,2], z = d[,3])
p <- p %>% add_trace(x = simd[,1], y = simd[,2], z = simd[,3])
p
# ANTES NO LINUX PARA FUNCIONAR O PLOTLY:
# sudo apt-get install libssl-dev
# sudo apt-get install libcurl4-openssl-dev
# install.packages("openssl")
# install.packages("libcurl")
# install.packages("curl")
# install.packages("httr")
# install.packages("plotly")
library(plotly)
# ou melhor (COM LAYERING)
# https://plot.ly/r/graphing-multiple-chart-types/
p2 <- plot_ly(as.data.frame(d)) %>%
add_trace(x = d[,1], y = d[,2], size = I(4))
p2 <- p2 %>% add_trace(x = simd[,1], y = simd[,2], size = I(4))
p2
# centroides:
p2 <- p2 %>% add_markers(x =centd[2,2], y=centd[2,1], size = I(8))
p2 <- p2 %>% add_markers(x =centd[1,1], y=centd[1,2], size = I(8))
p2 <- p2 %>% add_markers(x =centsim[2,1], y=centsim[2,2], size = I(8))
p2 <- p2 %>% add_markers(x =centsim[1,1], y=centsim[1,2], size = I(8))
p2 <- p2 %>% add_segments(x = centd[1,1], xend = d1[,1],
y = centd[1,2], yend = d1[,2],
alpha = 0.3, size = I(2))
p2 <- p2 %>% add_segments(x = centd[2,2], xend = d2[,1],
y = centd[2,1], yend = d2[,2],
alpha = 0.3, size = I(2))
p2
cat('<iframe src="./assets/widgets/algorit_plotly.html" width=50% height=55% allowtransparency="true"> </iframe>')
# dados
n = 99
set.seed(1984)
# set.seed(123)
d1<-matrix(rnorm(n,mean=-2,sd=.5), n/3, 3) # 3d
d2<-matrix(rnorm(n,mean=0,sd=.3), n/3, 3)
d3<-matrix(rnorm(n,mean=3,sd=.4), n/3, 3)
d<-rbind(d1,d2,d3)
# MST
simd <- CCC_sim(d)
out <- mlpack_mst(as.matrix(d))
from <- out[1,]
to <- out[2,]
from_to.m <- t(cbind(from,to))
# criar um novo vetor com o from_to.m adicionando uma linha de NA na matrix inteira no final
# ideia dos NA's: https://community.plot.ly/t/droplines-from-points-in-3d-scatterplot/4113/4
# ideia de usar line: https://plot.ly/r/3d-line-plots/ (penultimo grafico)
m <- rbind(from_to.m, NA) # o NA servirá para separarmos os segmentos
ordem_linhas <- Reduce(rbind, m) # ok!
novo_d <- d[ordem_linhas,] # ok! parece que funciona!! o R recicla!!!
novo_d <- as.data.frame(novo_d)
# MST clustering
x <- scale(d)
M <- as.matrix(x)
dist.m<-dist_cpp(M)
diag(dist.m) <- max(dist.m) +1
dist.m<-dist_cpp(M)
dist.m<-dist(M)
diag(dist.m) <- max(dist.m) +1
diag(dist.m) <- max(dist.m) +1
dist.m<-emstreeR::dist_cpp(M)
d
out <- ComputeMST(t(d), verbose = FALSE)
out <- ComputeMST(t(d), verbose = FALSE)
out
out <- ComputeMST(d, verbose = FALSE)
out
Reduce(rbind, rbind(t(out[, c("from", "to")]), NA))
aaa <- c(16, 12)
bbb <- c(12, 12)
ccc <- c(14, 14)
aaaa <- c(18, 11)
bbbb <- c(14, 14)
cccc <- c(8, 8)
aaaaa <- c(42, 21.5)
bbbbb <- c(25, 12.5)
ccccc <- c(26.5, 26)
plot_ly() %>%
add_trace(x = aaa, y = bbb, z = ccc, type = "scatter3d", mode = "lines",
name = "lines", showlegend = FALSE) %>%
add_trace(x = aaaa, y = bbbb, z = cccc, type = "scatter3d", mode = "lines",
name = "lines", showlegend = FALSE) %>%
add_trace(x = aaaaa, y = bbbbb, z = ccccc, type = "scatter3d", mode = "lines",
name = "lines", showlegend = FALSE) %>%
add_trace(x = ap, y = bp, z = cp, marker = m1, type = "scatter3d", mode = "text+markers",
name = "projected", linetypes = NULL, text = rnn) %>%
add_trace(x = a, y = b, z = c, marker = m, type = "scatter3d", mode = "text+markers",
name = "original", linetypes = NULL, text = rnn)
a <- c(5,16,16,17,18,23,25,27,37,42,5)
b <- c(13,12,26,15,14,6,10,22,14,25,17)
c <- c(12,14,25,26,8,9,27,30,31,26.5,12)
ap <- c(5,12,16,17,11,23,25,27,37,21.5,5)
bp <- c(13,12,26,15,14,6,10,22,14,12.5,17)
cp <- c(12,14,25,26,8,9,27,30,31,26,12)
plot_ly() %>%
add_trace(x = aaa, y = bbb, z = ccc, type = "scatter3d", mode = "lines",
name = "lines", showlegend = FALSE) %>%
add_trace(x = aaaa, y = bbbb, z = cccc, type = "scatter3d", mode = "lines",
name = "lines", showlegend = FALSE) %>%
add_trace(x = aaaaa, y = bbbbb, z = ccccc, type = "scatter3d", mode = "lines",
name = "lines", showlegend = FALSE) %>%
add_trace(x = ap, y = bp, z = cp, marker = m1, type = "scatter3d", mode = "text+markers",
name = "projected", linetypes = NULL, text = rnn) %>%
add_trace(x = a, y = b, z = c, marker = m, type = "scatter3d", mode = "text+markers",
name = "original", linetypes = NULL, text = rnn)
ord_data <- d
#
#
library(dplyr) # we wanna use pipes
library(plotly)
plot_ly(showlegend = T) %>%
add_markers(data=ord_data, x = ~X1, y = ~X2, z = ~X3,
marker=list(opacity=0.5), size = I(3.5), name="points") %>%
add_paths(data=ord_data, x = ~X1, y = ~X2, z = ~X3,
color = I("red"), name="edges")
plot_ly(showlegend = T) %>%
add_markers(data=ord_data, x = ~X1, y = ~X2, z = ~X3,
marker=list(opacity=0.5), size = I(3.5), name="points")
ord_data
ord_data <- as.data.frame(d)
ord_data
plot_ly(showlegend = T) %>%
add_markers(data=ord_data, x = ~V1, y = ~V2, z = ~V3,
marker=list(opacity=0.5), size = I(3.5), name="points") %>%
add_paths(data=ord_data, x = ~V1, y = ~V2, z = ~V3,
color = I("red"), name="edges")
out[, c("from", "to")]
t(out[, c("from", "to")])
rbind(t(out[, c("from", "to")]), NA)
# some adjusts needed
ord_id <- Reduce(rbind, rbind(t(out[, c("from", "to")]), NA))
ord_id
out
ord_data <- out[ord_id, c("V1", "V2", "V3")]
ord_data
library(dplyr) # we wanna use pipes
library(plotly)
plot_ly(showlegend = T) %>%
add_markers(data=ord_data, x = ~V1, y = ~V2, z = ~V3,
marker=list(opacity=0.5), size = I(3.5), name="points") %>%
add_paths(data=ord_data, x = ~V1, y = ~V2, z = ~V3,
color = I("red"), name="edges")
rstudioapi::askForSecret()
## register your Google API
register_google(key = rstudioapi::askForSecret(name = "key"))
## register your Google API
register_google(key = input())
blogdown:::preview_site(startup = TRUE)
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
