[{"authors":null,"categories":null,"content":"This folder contais the slides of two R courses I have taught at FNDE:\n Data Analysis with R (I) - Inroductory Level\n Data Analysis with R (II) - Intermediary Level\n  (*) Please, be advised that all the content is in Portuguese.\n","date":1536462000,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536462000,"objectID":"c3224f3a64174f08aaf31e1f1d16ffd3","permalink":"/tutorial/","publishdate":"2018-09-09T00:00:00-03:00","relpermalink":"/tutorial/","section":"tutorial","summary":"This folder contais the slides of two R courses I have taught at FNDE:\n Data Analysis with R (I) - Inroductory Level\n Data Analysis with R (II) - Intermediary Level\n  (*) Please, be advised that all the content is in Portuguese.","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":["R"],"content":"       I am proud to announce emstreeR - my first R package that is available on CRAN since December 3rd, 2018.\nemstreeR is a package for fast and easily computing Euclidean Minimum Spanning Trees (EMST). It heavily relies on RcppMLPACK and Rcpp to work as wrapper to the EMST Dual-Tree Boruvka algorithm (March, Ram, Gray, 2010) implemented in ‘mlpack’ - the C++ Machine Learning library (Curtin, 2005). With ‘emstreeR’, R users have access to the C++ fast EMST algorithm without having to deal with the R-Rcpp-C++ integration. The package also provides functions and an S3 method for readily plotting the Minimum Spanning Trees (MST) using either ‘base’, ‘scatterplot3d’ or ‘ggplot2’ style.\nWorking with ‘emstreeR’ is easy because you just have to pass a matrix or data.frame of points as an argument to the main function computeMST() in order to get things working.\nBut, before we begin, what exactly is a Minimum Spanning Tree?\nI will try to explain that without bringing any graph concept to the discussion.\nImagine you have to connect a group of South American cities with pipelines in order to distribute the natural gas extracted from an offshore platform on the coast of Rio de Janeiro. To optimize your operations, you need to know the most efficient route, e.g. the route that connects all the cities within the minimum distance possible. That optimal route between the cities is a Minimum Spanning Tree. Therefore, the MST problem is, in its essence, an optimization problem.\nThe distances between the points can be calculated using various methods, such as Manhattan, Euclidean, Minkowski, etc. ‘emstreeR’ uses Euclidean distances. Hence, the name Euclidean Minimum Spanning Trees.\nSo, let’s try to reproduce the aforementioned example.\nFirst, we are going to use the package ‘ggmap’. We will pass the cities names as arguments and then get their latitude and longitude coordinates, using the Data Science Toolkit repository (source = \u0026quot;dsk\u0026quot;).\nlibrary(ggmap) ## cities: cities_location \u0026lt;- data.frame(location = c(\u0026quot;Passo Fundo, Brazil\u0026quot;, \u0026quot;Buenos Aires, Argentina\u0026quot;, \u0026quot;Assuncion, Paraguay\u0026quot;, \u0026quot;Campinas, Brazil\u0026quot;, \u0026quot;Cubatao, Brazil\u0026quot;, \u0026quot;Mendoza, Argentina\u0026quot;, \u0026quot;Corrientes, Argentina\u0026quot;, \u0026quot;Porto Velho, Brazil\u0026quot;, \u0026quot;Manaus, Brazil\u0026quot;, \u0026quot;Santa Cruz de La Sierra, Bolivia\u0026quot;, \u0026quot;Belo Horizonte, Brazil\u0026quot;, \u0026quot;Brasília, Brazil\u0026quot;, \u0026quot;Rio de Janeiro, Brazil\u0026quot;, \u0026quot;Campo Grande, Brazil\u0026quot;, \u0026quot;Recife, Brazil\u0026quot; ), stringsAsFactors = FALSE) ## get latitude and longitude geo_location \u0026lt;- geocode(cities_location$location, source = \u0026quot;dsk\u0026quot;) ## combine data: df_location \u0026lt;- cbind(cities_location, geo_location) Let’s plot the map, so we can have an initial notion about what we are dealing with.\n# coordinates for South America map_grid \u0026lt;- c(left = -80, bottom = -40, right = -20, top = 0) library(dplyr) # we wanna use pipes get_stamenmap(map_grid, zoom = 5) %\u0026gt;% ggmap()+ geom_point(data = df_location, aes(x = lon, y = lat), size=2) Now is when emstreeR comes in handy. We pass the point columns as the argument to computeMST() and it calculates the minimum route connecting all the points, e.g. the Euclidean Minimum Spanning Tree.\n## MST: library(emstreeR) out \u0026lt;- ComputeMST(df_location[,2:3]) ## 9 edges found so far. ## 210 cumulative base cases. ## 0 cumulative node combinations scored. ## 12 edges found so far. ## 394 cumulative base cases. ## 0 cumulative node combinations scored. ## 14 edges found so far. ## 542 cumulative base cases. ## 0 cumulative node combinations scored. ## Total spanning tree length: 10.012 out ## lon lat from to distance ## 1 -52.40667 -28.26278 4 5 0.1275521 ## 2 -60.00000 -36.00000 3 7 0.2702386 ## 3 -57.63591 -25.30066 11 13 0.3350650 ## 4 -47.06083 -22.90556 5 13 0.3591768 ## 5 -46.42528 -23.89500 3 14 0.6189752 ## 6 -68.82717 -32.89084 11 12 0.6207409 ## 7 -58.83410 -27.48060 1 3 0.6437908 ## 8 -63.90389 -8.76194 8 9 0.7437005 ## 9 -60.02500 -3.10194 1 5 0.7956373 ## 10 -63.18117 -17.78629 2 7 0.9394038 ## 11 -43.93778 -19.92083 10 14 0.9534939 ## 12 -47.92972 -15.77972 8 10 0.9893601 ## 13 -43.20750 -22.90278 2 6 0.9989068 ## 14 -54.64639 -20.44278 11 15 1.6159137 ## 15 -34.88111 -8.05389 1 1 0.0000000 As a result, we have a data.frame containing our original data and three more columns: from, to, and distance. This information is the Minimum Spanning Tree and will be used for plotting.\nYou can silence the output of the algorithm by setting verbose=FALSE in computeMST().\nTo better visualize the result, we plot the map again, but now using the ggplot2’s extension provided in ‘emstreeR’: stat_MST().\n## Plot: # we use the same grid map get_stamenmap(map_grid, zoom = 5) %\u0026gt;% ggmap()+ stat_MST(data = out, aes(x = lon, y = lat, from=from, to=to), colour=\u0026quot;red\u0026quot;, linetype = 2)+ geom_point(data = out, aes(x = lon, y = lat), size=3) Once you have the information about the minimum route, it is easy to see that you will have to install gas distribution hubs in cities that will have more than two incoming or outgoing links, such as Assuncion in Paraguay. Based on that information or other criteria such as connectivity or even by cutting the largest edge, you can also define or separate regions of operations. What I mean by this is that you can also use Minimum Spanning Trees in clustering problems. Nonetheless, let’s save that topic for another post.\nBelow, I will present other things you can do with ‘emstreeR’.\n‘emstreeR’ provides an S3 method for the ‘base’ function plot(). It is easy to make simple 2D plots with that.\n## artifical data for 2D plots: set.seed(1984) n \u0026lt;- 15 c1 \u0026lt;- data.frame(x = rnorm(n,-0.2, sd=0.2), y = rnorm(n,-2,sd=0.2)) c2 \u0026lt;- data.frame(x = rnorm(n,-1.1, sd=0.15), y = rnorm(n,-2,sd=0.3)) d \u0026lt;- rbind(c1, c2) d \u0026lt;- as.data.frame(d) ## MST: #library(emstreeR) out \u0026lt;- ComputeMST(d, verbose = FALSE)  ## simple 2D plot: plot(out, col.pts = \u0026quot;red\u0026quot;, col.segts = \u0026quot;blue\u0026quot;) The stat_MST() extension also makes it easy plotting 2D plots, but using ‘ggplot2’ as we showed before.\n## 2D plot with ggplot2: library(ggplot2) ggplot(data = out, aes(x = x, y = y, from = from, to = to))+ geom_point()+ stat_MST(colour=\u0026quot;red\u0026quot;) If you want something fancier, you can use the geom=curve argument:\n## 2D plot with ggplot2: #library(ggplot2) ggplot(data = out, aes(x = x, y = y, from=from, to=to))+ geom_point()+ stat_MST(geom=\u0026quot;curve\u0026quot;) You can also make 3D MST plots with ‘emstreeR’. It provides a wrapper for plotting 3D scatter plots, using the ‘scatterplot3d’ package.\nLet’s create 3D artificial data and compute the MST.\n## artificial data for 3D plots: n = 99 set.seed(1984) d1\u0026lt;-matrix(rnorm(n,mean=-2,sd=.5), n/3, 3) # 3d d2\u0026lt;-matrix(rnorm(n,mean=0,sd=.3), n/3, 3) d3\u0026lt;-matrix(rnorm(n,mean=3,sd=.4), n/3, 3) d\u0026lt;-rbind(d1,d2,d3) # just to show a matrix input ## MST: library(emstreeR) out \u0026lt;- ComputeMST(d, verbose = FALSE) We can do a simple 3D plot using the function plotMST3D().\n## simple 3D plot: plotMST3D(out, xlab = \u0026quot;xaxis\u0026quot;, main=\u0026quot;Just a MST 3D plot\u0026quot;) But, again, if you like fancier plots, we can also make an interactive 3D MST plot using ‘plotly’:\n# some adjusts needed ord_id \u0026lt;- Reduce(rbind, rbind(t(out[, c(\u0026quot;from\u0026quot;, \u0026quot;to\u0026quot;)]), NA)) ord_data \u0026lt;- out[ord_id, c(\u0026quot;X1\u0026quot;, \u0026quot;X2\u0026quot;, \u0026quot;X3\u0026quot;)] ord_data \u0026lt;- as.data.frame(ord_data) library(dplyr) # we wanna use pipes library(plotly) plot_ly(showlegend = T) %\u0026gt;% add_markers(data=ord_data, x = ~X1, y = ~X2, z = ~X3, marker=list(opacity=0.5), size = I(3.5), name=\u0026quot;points\u0026quot;) %\u0026gt;% add_paths(data=ord_data, x = ~X1, y = ~X2, z = ~X3, color = I(\u0026quot;red\u0026quot;), name=\u0026quot;edges\u0026quot;)  {\"x\":{\"visdat\":{\"df81b6efed3\":[\"function () \",\"plotlyVisDat\"],\"df8b33bac9\":[\"function () \",\"data\"],\"df85da35067\":[\"function () \",\"data\"]},\"cur_data\":\"df85da35067\",\"attrs\":{\"df8b33bac9\":{\"showlegend\":true,\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"x\":{},\"y\":{},\"z\":{},\"type\":\"scatter3d\",\"mode\":\"markers\",\"marker\":{\"opacity\":0.5},\"size\":[3.5],\"name\":\"points\",\"inherit\":true},\"df85da35067\":{\"showlegend\":true,\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"x\":{},\"y\":{},\"z\":{},\"type\":\"scatter3d\",\"mode\":\"lines\",\"color\":[\"red\"],\"name\":\"edges\",\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"scene\":{\"xaxis\":{\"title\":\"X1\"},\"yaxis\":{\"title\":\"X2\"},\"zaxis\":{\"title\":\"X3\"}},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[{\"name\":\"Collaborate\",\"icon\":{\"width\":1000,\"ascent\":500,\"descent\":-50,\"path\":\"M487 375c7-10 9-23 5-36l-79-259c-3-12-11-23-22-31-11-8-22-12-35-12l-263 0c-15 0-29 5-43 15-13 10-23 23-28 37-5 13-5 25-1 37 0 0 0 3 1 7 1 5 1 8 1 11 0 2 0 4-1 6 0 3-1 5-1 6 1 2 2 4 3 6 1 2 2 4 4 6 2 3 4 5 5 7 5 7 9 16 13 26 4 10 7 19 9 26 0 2 0 5 0 9-1 4-1 6 0 8 0 2 2 5 4 8 3 3 5 5 5 7 4 6 8 15 12 26 4 11 7 19 7 26 1 1 0 4 0 9-1 4-1 7 0 8 1 2 3 5 6 8 4 4 6 6 6 7 4 5 8 13 13 24 4 11 7 20 7 28 1 1 0 4 0 7-1 3-1 6-1 7 0 2 1 4 3 6 1 1 3 4 5 6 2 3 3 5 5 6 1 2 3 5 4 9 2 3 3 7 5 10 1 3 2 6 4 10 2 4 4 7 6 9 2 3 4 5 7 7 3 2 7 3 11 3 3 0 8 0 13-1l0-1c7 2 12 2 14 2l218 0c14 0 25-5 32-16 8-10 10-23 6-37l-79-259c-7-22-13-37-20-43-7-7-19-10-37-10l-248 0c-5 0-9-2-11-5-2-3-2-7 0-12 4-13 18-20 41-20l264 0c5 0 10 2 16 5 5 3 8 6 10 11l85 282c2 5 2 10 2 17 7-3 13-7 17-13z m-304 0c-1-3-1-5 0-7 1-1 3-2 6-2l174 0c2 0 4 1 7 2 2 2 4 4 5 7l6 18c0 3 0 5-1 7-1 1-3 2-6 2l-173 0c-3 0-5-1-8-2-2-2-4-4-4-7z m-24-73c-1-3-1-5 0-7 2-2 3-2 6-2l174 0c2 0 5 0 7 2 3 2 4 4 5 7l6 18c1 2 0 5-1 6-1 2-3 3-5 3l-174 0c-3 0-5-1-7-3-3-1-4-4-5-6z\"},\"click\":\"function(gd) { \\n // is this being viewed in RStudio?\\n if (location.search == '?viewer_pane=1') {\\n alert('To learn about plotly for collaboration, visit:\\\\n https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html');\\n } else {\\n window.open('https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html', '_blank');\\n }\\n }\"}],\"cloud\":false},\"data\":[{\"showlegend\":true,\"x\":[-0.046713997513217,-0.0685584940589797,0.0636074523580962,-0.00492205832117027,-0.395165647986004,-0.338570358785818,-1.5231763172966,-1.48803277042085,-0.197465890442984,-0.221835581916721,-0.197465890442984,-0.088286578247603,-1.85603314195385,-1.93962909731372,2.72518283465451,2.70200862769584,-0.107678397422481,-0.24732438085378,2.55596867744861,2.62735439608887,-0.218114224139469,-0.338570358785818,-0.046713997513217,-0.00492205832117027,-1.93692723569359,-2.00660906988694,-1.79539839189242,-1.93962909731372,2.90073887995543,2.74921084263877,2.70200862769584,2.82873384658181,-0.107678397422481,-0.088286578247603,2.72289967526452,2.56314210846198,-0.105609564616152,-0.0300148956776743,-0.105609564616152,-0.00492205832117027,-1.68207383640494,-1.54830300957135,0.372878991847474,0.286793539853064,-0.0366242892683186,-0.107678397422481,-0.218114224139469,-0.0685584940589797,-0.218114224139469,-0.188783796323926,3.05374072519382,3.25938370901499,2.91713685665477,2.78878827336018,-1.48803277042085,-1.54830300957135,-0.188783796323926,-0.401680655198066,3.05374072519382,2.94814702917937,-1.78512969269477,-1.87624114096369,-2.41636271488956,-2.55379344470451,-0.218114224139469,-0.24732438085378,2.56314210846198,2.58361949719777,0.116599929387485,-0.0685584940589797,0.116599929387485,0.285498424971517,2.70200862769584,2.58361949719777,2.48208562339008,2.56314210846198,-0.163375780065643,-0.0366242892683186,-0.395165647986004,-0.377391271422537,-1.79539839189242,-1.58147587487362,2.90073887995543,2.97975273701916,-0.354646956289946,-0.459122503570025,3.3485939832916,3.32146840272461,-1.58885767575268,-1.69708132679065,-1.5231763172966,-1.29200862111695,-0.339581988149387,-0.377391271422537,-1.68207383640494,-1.93692723569359,-2.16151248557708,-2.41636271488956,-2.16151248557708,-2.26310394224839,0.0636074523580962,0.31712203950271,2.58361949719777,2.78878827336018,-2.00660906988694,-1.87624114096369,2.54403167570144,2.48208562339008,0.116599929387485,0.286793539853064,2.74921084263877,2.58362894595548,-0.0366242892683186,0.174216907589974,3.05203026997513,2.82873384658181,0.0636074523580962,0.14240468806414,-1.5231763172966,-1.40575507827367,3.32146840272461,3.07828143229178,-0.395165647986004,-0.354646956289946,-1.85603314195385,-1.99112745192653,2.55596867744861,2.62003663164955,2.62003663164955,2.78878827336018,-1.68207383640494,-1.85899449805446,-2.26310394224839,-1.93962909731372,2.99868638485847,2.65791757532538,-1.37902171592439,-1.54830300957135,2.58362894595548,2.82873384658181,2.90073887995543,3.07828143229178,3.3485939832916,3.4121379560553,3.81853973829928,4.09293862946261,2.72289967526452,2.65791757532538,0.286793539853064,0.251537470418265,-0.339581988149387,-0.00325777899527525,3.05374072519382,3.07828143229178,-2.88778024442006,-2.73521208864277,3.35094011067944,3.05203026997513,-1.72877277541825,-1.93692723569359,-2.16151248557708,-1.78512969269477,-1.29200862111695,-1.13800299183489,-1.85899449805446,-1.58885767575268,-1.78512969269477,-1.95414092498558,-0.264029726473329,-0.401680655198066,3.81853973829928,3.4121379560553,0.696834584277854,0.285498424971517,-1.99112745192653,-1.49600575521992,2.88604037485881,2.97975273701916,-2.26310394224839,-2.73521208864277,-1.99112745192653,-2.29315430233772,2.57064823116706,2.65791757532538,3.11218296657133,2.54403167570144,-2.85687894026298,-2.32430796488639,-2.85687894026298,-2.55379344470451,-2.92306439200917,-2.73521208864277,-1.49600575521992,-0.264029726473329,0.31712203950271,2.54403167570144,-1.79539839189242,-1.79539839189242],\"y\":[0.145101255533289,0.0760594177763837,0.288205838712991,0.257949712998362,-0.00431927279800628,-0.0716412935998873,-2.14425553128117,-2.22838754896476,-0.0299338621614169,-0.066384045433591,-0.0299338621614169,-0.021413190578135,-1.37932956573783,-1.44567165559502,2.65351319858374,2.74120722862281,-0.179702063070925,-0.206890216383374,3.57423773792872,3.7128099574064,-0.05942965168387,-0.0716412935998873,0.145101255533289,0.257949712998362,-2.31501040397909,-2.41208440052755,-1.52185053590828,-1.44567165559502,2.66942114290125,2.74736975358472,2.74120722862281,2.82905082002061,-0.179702063070925,-0.021413190578135,3.04805961440217,2.93909147783109,0.167284211116258,0.255717680895006,0.167284211116258,0.257949712998362,-2.42701417815477,-2.3241297794636,0.272682763508783,0.0839550187496657,-0.280329198324527,-0.179702063070925,-0.05942965168387,0.0760594177763837,-0.05942965168387,-0.272803975699384,3.37368778996681,3.4350578029584,3.29138318002123,3.13075294444178,-2.22838754896476,-2.3241297794636,-0.272803975699384,-0.327196477107268,3.37368778996681,3.29336836261454,-2.19013892159155,-2.34473099905127,-1.97526183010415,-2.16606526218669,-0.05942965168387,-0.206890216383374,2.93909147783109,2.97920178887571,-0.0469207224192381,0.0760594177763837,-0.0469207224192381,-0.125750758665957,2.74120722862281,2.97920178887571,2.68473350897271,2.93909147783109,-0.500219977660278,-0.280329198324527,-0.00431927279800628,0.0366831180675923,-1.52185053590828,-1.40779181724364,2.66942114290125,2.42965245812497,0.266308839760768,0.505643273320174,2.89119488705872,2.766886163577,-2.36865012312408,-2.14137335716712,-2.14425553128117,-2.05480587732028,0.0312052224166501,0.0366831180675923,-2.42701417815477,-2.31501040397909,-1.85116701834483,-1.97526183010415,-1.85116701834483,-1.59950667387064,0.288205838712991,0.24935937855356,2.97920178887571,3.13075294444178,-2.41208440052755,-2.34473099905127,2.83296210006876,2.68473350897271,-0.0469207224192381,0.0839550187496657,2.74736975358472,2.89306515176021,-0.280329198324527,-0.151543201261912,2.83452996461008,2.82905082002061,0.288205838712991,0.578612201165647,-2.14425553128117,-2.1707085838591,2.766886163577,2.95698519842931,-0.00431927279800628,0.266308839760768,-1.37932956573783,-1.42556397669975,3.57423773792872,3.34335880787618,3.34335880787618,3.13075294444178,-2.42701417815477,-2.66959608174581,-1.59950667387064,-1.44567165559502,3.41984905664545,3.3676663977988,-2.58840363769649,-2.3241297794636,2.89306515176021,2.82905082002061,2.66942114290125,2.95698519842931,2.89119488705872,3.00248578883163,3.37856205772373,3.19706871875853,3.04805961440217,3.3676663977988,0.0839550187496657,-0.277771306244062,0.0312052224166501,0.206620612071227,3.37368778996681,2.95698519842931,-1.37832242020558,-1.19174696907868,2.50252738532356,2.83452996461008,-1.8783472427296,-2.31501040397909,-1.85116701834483,-2.19013892159155,-2.05480587732028,-2.33326069464062,-2.66959608174581,-2.36865012312408,-2.19013892159155,-2.00828804444381,-0.792558950880535,-0.327196477107268,3.37856205772373,3.00248578883163,-0.529830818415005,-0.125750758665957,-1.42556397669975,-1.16704751001735,1.95530044689826,2.42965245812497,-1.59950667387064,-1.19174696907868,-1.42556397669975,-1.67322368565353,4.04522161453655,3.3676663977988,2.5409356526667,2.83296210006876,-2.48712881172095,-2.78290190120894,-2.48712881172095,-2.16606526218669,-0.74782312581342,-1.19174696907868,-1.16704751001735,-0.792558950880535,0.24935937855356,2.83296210006876,-1.52185053590828,-1.52185053590828],\"z\":[0.0568800284146869,0.088059363643747,-0.0862372551098345,-0.0519641604635114,-0.0919282248250674,-0.0905806756935537,-2.25418469784249,-2.24310186413887,0.342791270305189,0.442468595340893,0.342791270305189,0.330242955312922,-2.19429643620777,-2.22836547790316,2.77041372999585,2.84650789321635,0.236468008935428,0.204817142203963,3.40435289628272,3.39759851097787,0.0138002539866289,-0.0905806756935537,0.0568800284146869,-0.0519641604635114,-1.92054685990701,-2.0390325783709,-2.27001423351884,-2.22836547790316,3.40114446794371,3.3923698646119,2.84650789321635,2.92859903451418,0.236468008935428,0.330242955312922,2.57972950059037,2.56644040467547,-0.199721930085373,-0.357697330900803,-0.199721930085373,-0.0519641604635114,-1.94292458189748,-2.05442238354669,-0.267271311471426,-0.224711843463383,0.411808309432311,0.236468008935428,0.0138002539866289,0.088059363643747,0.0138002539866289,-0.0246294116976458,3.29220749351495,3.27339942330727,2.86905399876499,2.94729082015457,-2.24310186413887,-2.05442238354669,-0.0246294116976458,-0.0280887797890447,3.29220749351495,3.47543993422796,-2.441559592838,-2.29155162963517,-2.27609597386725,-2.21794027643834,0.0138002539866289,0.204817142203963,2.56644040467547,2.80643328446387,-0.024405483210775,0.088059363643747,-0.024405483210775,0.161909415999245,2.84650789321635,2.80643328446387,2.52899359447085,2.56644040467547,0.322563387862346,0.411808309432311,-0.0919282248250674,-0.356435365562294,-2.27001423351884,-2.38248383064026,3.40114446794371,3.5106367015107,0.0808611145792359,0.173673765633308,2.96922193776979,3.21449753227233,-1.41522955348519,-1.29752153576632,-2.25418469784249,-2.13490360821276,-0.633177495160734,-0.356435365562294,-1.94292458189748,-1.92054685990701,-2.31475984151011,-2.27609597386725,-2.31475984151011,-2.21064844752997,-0.0862372551098345,0.0415248458424777,2.80643328446387,2.94729082015457,-2.0390325783709,-2.29155162963517,2.2821092550466,2.52899359447085,-0.024405483210775,-0.224711843463383,3.3923698646119,3.19380274902531,0.411808309432311,0.575669253953099,2.73278181051865,2.92859903451418,-0.0862372551098345,-0.12611480372421,-2.25418469784249,-2.5374685060403,3.21449753227233,3.24513528905641,-0.0919282248250674,0.0808611145792359,-2.19429643620777,-1.90245228729336,3.40435289628272,3.17041466130825,3.17041466130825,2.94729082015457,-1.94292458189748,-1.75248353669171,-2.21064844752997,-2.22836547790316,2.46424262025308,2.36825985381468,-2.23603606715923,-2.05442238354669,3.19380274902531,2.92859903451418,3.40114446794371,3.24513528905641,2.96922193776979,2.6215858474234,2.73910871835619,2.56080012694023,2.57972950059037,2.36825985381468,-0.224711843463383,-0.411974258326592,-0.633177495160734,-0.773078844062943,3.29220749351495,3.24513528905641,-2.72468800986234,-2.37962525058802,2.64349006849316,2.73278181051865,-1.85008969381723,-1.92054685990701,-2.31475984151011,-2.441559592838,-2.13490360821276,-1.7191315741103,-1.75248353669171,-1.41522955348519,-2.441559592838,-2.92032273797414,-0.324029847522204,-0.0280887797890447,2.73910871835619,2.6215858474234,-0.026841463398261,0.161909415999245,-1.90245228729336,-1.63157821822375,3.10594671433657,3.5106367015107,-2.21064844752997,-2.37962525058802,-1.90245228729336,-1.37824248095622,2.56074770504139,2.36825985381468,1.94190797251289,2.2821092550466,-1.41433193911949,-0.887949351939884,-1.41433193911949,-2.21794027643834,-1.55021513302471,-2.37962525058802,-1.63157821822375,-0.324029847522204,0.0415248458424777,2.2821092550466,-2.27001423351884,-2.27001423351884],\"type\":\"scatter3d\",\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"size\":[3.5],\"sizemode\":\"area\",\"opacity\":0.5,\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"name\":\"points\",\"textfont\":{\"size\":3.5},\"error_y\":{\"color\":\"rgba(31,119,180,1)\",\"width\":3.5},\"error_x\":{\"color\":\"rgba(31,119,180,1)\",\"width\":3.5},\"line\":{\"color\":\"rgba(31,119,180,1)\",\"width\":3.5},\"frame\":null},{\"showlegend\":true,\"x\":[-0.046713997513217,-0.0685584940589797,null,0.0636074523580962,-0.00492205832117027,null,-0.395165647986004,-0.338570358785818,null,-1.5231763172966,-1.48803277042085,null,-0.197465890442984,-0.221835581916721,null,-0.197465890442984,-0.088286578247603,null,-1.85603314195385,-1.93962909731372,null,2.72518283465451,2.70200862769584,null,-0.107678397422481,-0.24732438085378,null,2.55596867744861,2.62735439608887,null,-0.218114224139469,-0.338570358785818,null,-0.046713997513217,-0.00492205832117027,null,-1.93692723569359,-2.00660906988694,null,-1.79539839189242,-1.93962909731372,null,2.90073887995543,2.74921084263877,null,2.70200862769584,2.82873384658181,null,-0.107678397422481,-0.088286578247603,null,2.72289967526452,2.56314210846198,null,-0.105609564616152,-0.0300148956776743,null,-0.105609564616152,-0.00492205832117027,null,-1.68207383640494,-1.54830300957135,null,0.372878991847474,0.286793539853064,null,-0.0366242892683186,-0.107678397422481,null,-0.218114224139469,-0.0685584940589797,null,-0.218114224139469,-0.188783796323926,null,3.05374072519382,3.25938370901499,null,2.91713685665477,2.78878827336018,null,-1.48803277042085,-1.54830300957135,null,-0.188783796323926,-0.401680655198066,null,3.05374072519382,2.94814702917937,null,-1.78512969269477,-1.87624114096369,null,-2.41636271488956,-2.55379344470451,null,-0.218114224139469,-0.24732438085378,null,2.56314210846198,2.58361949719777,null,0.116599929387485,-0.0685584940589797,null,0.116599929387485,0.285498424971517,null,2.70200862769584,2.58361949719777,null,2.48208562339008,2.56314210846198,null,-0.163375780065643,-0.0366242892683186,null,-0.395165647986004,-0.377391271422537,null,-1.79539839189242,-1.58147587487362,null,2.90073887995543,2.97975273701916,null,-0.354646956289946,-0.459122503570025,null,3.3485939832916,3.32146840272461,null,-1.58885767575268,-1.69708132679065,null,-1.5231763172966,-1.29200862111695,null,-0.339581988149387,-0.377391271422537,null,-1.68207383640494,-1.93692723569359,null,-2.16151248557708,-2.41636271488956,null,-2.16151248557708,-2.26310394224839,null,0.0636074523580962,0.31712203950271,null,2.58361949719777,2.78878827336018,null,-2.00660906988694,-1.87624114096369,null,2.54403167570144,2.48208562339008,null,0.116599929387485,0.286793539853064,null,2.74921084263877,2.58362894595548,null,-0.0366242892683186,0.174216907589974,null,3.05203026997513,2.82873384658181,null,0.0636074523580962,0.14240468806414,null,-1.5231763172966,-1.40575507827367,null,3.32146840272461,3.07828143229178,null,-0.395165647986004,-0.354646956289946,null,-1.85603314195385,-1.99112745192653,null,2.55596867744861,2.62003663164955,null,2.62003663164955,2.78878827336018,null,-1.68207383640494,-1.85899449805446,null,-2.26310394224839,-1.93962909731372,null,2.99868638485847,2.65791757532538,null,-1.37902171592439,-1.54830300957135,null,2.58362894595548,2.82873384658181,null,2.90073887995543,3.07828143229178,null,3.3485939832916,3.4121379560553,null,3.81853973829928,4.09293862946261,null,2.72289967526452,2.65791757532538,null,0.286793539853064,0.251537470418265,null,-0.339581988149387,-0.00325777899527525,null,3.05374072519382,3.07828143229178,null,-2.88778024442006,-2.73521208864277,null,3.35094011067944,3.05203026997513,null,-1.72877277541825,-1.93692723569359,null,-2.16151248557708,-1.78512969269477,null,-1.29200862111695,-1.13800299183489,null,-1.85899449805446,-1.58885767575268,null,-1.78512969269477,-1.95414092498558,null,-0.264029726473329,-0.401680655198066,null,3.81853973829928,3.4121379560553,null,0.696834584277854,0.285498424971517,null,-1.99112745192653,-1.49600575521992,null,2.88604037485881,2.97975273701916,null,-2.26310394224839,-2.73521208864277,null,-1.99112745192653,-2.29315430233772,null,2.57064823116706,2.65791757532538,null,3.11218296657133,2.54403167570144,null,-2.85687894026298,-2.32430796488639,null,-2.85687894026298,-2.55379344470451,null,-2.92306439200917,-2.73521208864277,null,-1.49600575521992,-0.264029726473329,null,0.31712203950271,2.54403167570144,null,-1.79539839189242,-1.79539839189242],\"y\":[0.145101255533289,0.0760594177763837,null,0.288205838712991,0.257949712998362,null,-0.00431927279800628,-0.0716412935998873,null,-2.14425553128117,-2.22838754896476,null,-0.0299338621614169,-0.066384045433591,null,-0.0299338621614169,-0.021413190578135,null,-1.37932956573783,-1.44567165559502,null,2.65351319858374,2.74120722862281,null,-0.179702063070925,-0.206890216383374,null,3.57423773792872,3.7128099574064,null,-0.05942965168387,-0.0716412935998873,null,0.145101255533289,0.257949712998362,null,-2.31501040397909,-2.41208440052755,null,-1.52185053590828,-1.44567165559502,null,2.66942114290125,2.74736975358472,null,2.74120722862281,2.82905082002061,null,-0.179702063070925,-0.021413190578135,null,3.04805961440217,2.93909147783109,null,0.167284211116258,0.255717680895006,null,0.167284211116258,0.257949712998362,null,-2.42701417815477,-2.3241297794636,null,0.272682763508783,0.0839550187496657,null,-0.280329198324527,-0.179702063070925,null,-0.05942965168387,0.0760594177763837,null,-0.05942965168387,-0.272803975699384,null,3.37368778996681,3.4350578029584,null,3.29138318002123,3.13075294444178,null,-2.22838754896476,-2.3241297794636,null,-0.272803975699384,-0.327196477107268,null,3.37368778996681,3.29336836261454,null,-2.19013892159155,-2.34473099905127,null,-1.97526183010415,-2.16606526218669,null,-0.05942965168387,-0.206890216383374,null,2.93909147783109,2.97920178887571,null,-0.0469207224192381,0.0760594177763837,null,-0.0469207224192381,-0.125750758665957,null,2.74120722862281,2.97920178887571,null,2.68473350897271,2.93909147783109,null,-0.500219977660278,-0.280329198324527,null,-0.00431927279800628,0.0366831180675923,null,-1.52185053590828,-1.40779181724364,null,2.66942114290125,2.42965245812497,null,0.266308839760768,0.505643273320174,null,2.89119488705872,2.766886163577,null,-2.36865012312408,-2.14137335716712,null,-2.14425553128117,-2.05480587732028,null,0.0312052224166501,0.0366831180675923,null,-2.42701417815477,-2.31501040397909,null,-1.85116701834483,-1.97526183010415,null,-1.85116701834483,-1.59950667387064,null,0.288205838712991,0.24935937855356,null,2.97920178887571,3.13075294444178,null,-2.41208440052755,-2.34473099905127,null,2.83296210006876,2.68473350897271,null,-0.0469207224192381,0.0839550187496657,null,2.74736975358472,2.89306515176021,null,-0.280329198324527,-0.151543201261912,null,2.83452996461008,2.82905082002061,null,0.288205838712991,0.578612201165647,null,-2.14425553128117,-2.1707085838591,null,2.766886163577,2.95698519842931,null,-0.00431927279800628,0.266308839760768,null,-1.37932956573783,-1.42556397669975,null,3.57423773792872,3.34335880787618,null,3.34335880787618,3.13075294444178,null,-2.42701417815477,-2.66959608174581,null,-1.59950667387064,-1.44567165559502,null,3.41984905664545,3.3676663977988,null,-2.58840363769649,-2.3241297794636,null,2.89306515176021,2.82905082002061,null,2.66942114290125,2.95698519842931,null,2.89119488705872,3.00248578883163,null,3.37856205772373,3.19706871875853,null,3.04805961440217,3.3676663977988,null,0.0839550187496657,-0.277771306244062,null,0.0312052224166501,0.206620612071227,null,3.37368778996681,2.95698519842931,null,-1.37832242020558,-1.19174696907868,null,2.50252738532356,2.83452996461008,null,-1.8783472427296,-2.31501040397909,null,-1.85116701834483,-2.19013892159155,null,-2.05480587732028,-2.33326069464062,null,-2.66959608174581,-2.36865012312408,null,-2.19013892159155,-2.00828804444381,null,-0.792558950880535,-0.327196477107268,null,3.37856205772373,3.00248578883163,null,-0.529830818415005,-0.125750758665957,null,-1.42556397669975,-1.16704751001735,null,1.95530044689826,2.42965245812497,null,-1.59950667387064,-1.19174696907868,null,-1.42556397669975,-1.67322368565353,null,4.04522161453655,3.3676663977988,null,2.5409356526667,2.83296210006876,null,-2.48712881172095,-2.78290190120894,null,-2.48712881172095,-2.16606526218669,null,-0.74782312581342,-1.19174696907868,null,-1.16704751001735,-0.792558950880535,null,0.24935937855356,2.83296210006876,null,-1.52185053590828,-1.52185053590828],\"z\":[0.0568800284146869,0.088059363643747,null,-0.0862372551098345,-0.0519641604635114,null,-0.0919282248250674,-0.0905806756935537,null,-2.25418469784249,-2.24310186413887,null,0.342791270305189,0.442468595340893,null,0.342791270305189,0.330242955312922,null,-2.19429643620777,-2.22836547790316,null,2.77041372999585,2.84650789321635,null,0.236468008935428,0.204817142203963,null,3.40435289628272,3.39759851097787,null,0.0138002539866289,-0.0905806756935537,null,0.0568800284146869,-0.0519641604635114,null,-1.92054685990701,-2.0390325783709,null,-2.27001423351884,-2.22836547790316,null,3.40114446794371,3.3923698646119,null,2.84650789321635,2.92859903451418,null,0.236468008935428,0.330242955312922,null,2.57972950059037,2.56644040467547,null,-0.199721930085373,-0.357697330900803,null,-0.199721930085373,-0.0519641604635114,null,-1.94292458189748,-2.05442238354669,null,-0.267271311471426,-0.224711843463383,null,0.411808309432311,0.236468008935428,null,0.0138002539866289,0.088059363643747,null,0.0138002539866289,-0.0246294116976458,null,3.29220749351495,3.27339942330727,null,2.86905399876499,2.94729082015457,null,-2.24310186413887,-2.05442238354669,null,-0.0246294116976458,-0.0280887797890447,null,3.29220749351495,3.47543993422796,null,-2.441559592838,-2.29155162963517,null,-2.27609597386725,-2.21794027643834,null,0.0138002539866289,0.204817142203963,null,2.56644040467547,2.80643328446387,null,-0.024405483210775,0.088059363643747,null,-0.024405483210775,0.161909415999245,null,2.84650789321635,2.80643328446387,null,2.52899359447085,2.56644040467547,null,0.322563387862346,0.411808309432311,null,-0.0919282248250674,-0.356435365562294,null,-2.27001423351884,-2.38248383064026,null,3.40114446794371,3.5106367015107,null,0.0808611145792359,0.173673765633308,null,2.96922193776979,3.21449753227233,null,-1.41522955348519,-1.29752153576632,null,-2.25418469784249,-2.13490360821276,null,-0.633177495160734,-0.356435365562294,null,-1.94292458189748,-1.92054685990701,null,-2.31475984151011,-2.27609597386725,null,-2.31475984151011,-2.21064844752997,null,-0.0862372551098345,0.0415248458424777,null,2.80643328446387,2.94729082015457,null,-2.0390325783709,-2.29155162963517,null,2.2821092550466,2.52899359447085,null,-0.024405483210775,-0.224711843463383,null,3.3923698646119,3.19380274902531,null,0.411808309432311,0.575669253953099,null,2.73278181051865,2.92859903451418,null,-0.0862372551098345,-0.12611480372421,null,-2.25418469784249,-2.5374685060403,null,3.21449753227233,3.24513528905641,null,-0.0919282248250674,0.0808611145792359,null,-2.19429643620777,-1.90245228729336,null,3.40435289628272,3.17041466130825,null,3.17041466130825,2.94729082015457,null,-1.94292458189748,-1.75248353669171,null,-2.21064844752997,-2.22836547790316,null,2.46424262025308,2.36825985381468,null,-2.23603606715923,-2.05442238354669,null,3.19380274902531,2.92859903451418,null,3.40114446794371,3.24513528905641,null,2.96922193776979,2.6215858474234,null,2.73910871835619,2.56080012694023,null,2.57972950059037,2.36825985381468,null,-0.224711843463383,-0.411974258326592,null,-0.633177495160734,-0.773078844062943,null,3.29220749351495,3.24513528905641,null,-2.72468800986234,-2.37962525058802,null,2.64349006849316,2.73278181051865,null,-1.85008969381723,-1.92054685990701,null,-2.31475984151011,-2.441559592838,null,-2.13490360821276,-1.7191315741103,null,-1.75248353669171,-1.41522955348519,null,-2.441559592838,-2.92032273797414,null,-0.324029847522204,-0.0280887797890447,null,2.73910871835619,2.6215858474234,null,-0.026841463398261,0.161909415999245,null,-1.90245228729336,-1.63157821822375,null,3.10594671433657,3.5106367015107,null,-2.21064844752997,-2.37962525058802,null,-1.90245228729336,-1.37824248095622,null,2.56074770504139,2.36825985381468,null,1.94190797251289,2.2821092550466,null,-1.41433193911949,-0.887949351939884,null,-1.41433193911949,-2.21794027643834,null,-1.55021513302471,-2.37962525058802,null,-1.63157821822375,-0.324029847522204,null,0.0415248458424777,2.2821092550466,null,-2.27001423351884,-2.27001423351884],\"type\":\"scatter3d\",\"mode\":\"lines\",\"name\":\"edges\",\"marker\":{\"color\":\"rgba(255,0,0,1)\",\"line\":{\"color\":\"rgba(255,0,0,1)\"}},\"textfont\":{\"color\":\"rgba(255,0,0,1)\"},\"error_y\":{\"color\":\"rgba(255,0,0,1)\"},\"error_x\":{\"color\":\"rgba(255,0,0,1)\"},\"line\":{\"color\":\"rgba(255,0,0,1)\"},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"base_url\":\"https://plot.ly\"},\"evals\":[\"config.modeBarButtonsToAdd.0.click\"],\"jsHooks\":[]} And that’s it! I hope you enjoy emstreeR.\n CRAN version: https://cran.r-project.org/package=emstreeR Dev version: https://github.com/allanvc/emstreeR  References Curtin, R. R. et al. (2005). Mlpack: A scalable C++ machine learning library. Journal of Machine Learning Research, v. 14, 2013. doi:10.1145/1835804.1835882.\nMarch, W. B., and Ram, P., and Gray, A. G. (2010). Fast euclidian minimum spanning tree: algorithm analysis, and applications. 16th ACM SIGKDD International Conference on Knowledge Discovery and Data mining, July 25-28 2010. Washington, DC, USA. doi:10.21105/joss.00726.\n ","date":1544494394,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1544494394,"objectID":"ed6011b474b7486d3d06a7125c7cf9ba","permalink":"/post/new_package_emstreer/2018-12-10-new_package_emstreer/","publishdate":"2018-12-10T21:13:14-05:00","relpermalink":"/post/new_package_emstreer/2018-12-10-new_package_emstreer/","section":"post","summary":"I am proud to announce emstreeR - my first R package that is available on CRAN since December 3rd, 2018.\nemstreeR is a package for fast and easily computing Euclidean Minimum Spanning Trees (EMST). It heavily relies on RcppMLPACK and Rcpp to work as wrapper to the EMST Dual-Tree Boruvka algorithm (March, Ram, Gray, 2010) implemented in ‘mlpack’ - the C++ Machine Learning library (Curtin, 2005).","tags":["emstreeR","Minimum Spanning Trees","mlpack"],"title":"Announcing the new 'emstreeR' package","type":"post"},{"authors":null,"categories":null,"content":" Topics/slides  Intro \u0026amp; first steps\n R Objects creation and manipulation\n Logical operators and control statements\n Base R graphics\n Read, manipulate and write data\n Final assignment (not available)\n  ","date":1536462000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1536462000,"objectID":"2d2f3394d6ddf0a5b1966fc55bc0a0c2","permalink":"/tutorial/dwr1/","publishdate":"2018-09-09T00:00:00-03:00","relpermalink":"/tutorial/dwr1/","section":"tutorial","summary":" Topics/slides  Intro \u0026amp; first steps\n R Objects creation and manipulation\n Logical operators and control statements\n Base R graphics\n Read, manipulate and write data\n Final assignment (not available)\n  ","tags":null,"title":"Data Analysis with R (I) - Introductory Level","type":"docs"},{"authors":null,"categories":null,"content":" Topics/slides  Review and functions\n Loops\n Apply family\n Intro to Tidyverse, strings and REGEX manipulation with stringr\n Dates with lubridate\n Data wrangling with dplyr\n Two table verbs in dplyr\n Accessing SQL databases with dbplyr\n Graphics with ggplot2\n  ","date":1536462000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1536462000,"objectID":"d9a1f78162f3ab2f127a2e65ec22d053","permalink":"/tutorial/dwr2/","publishdate":"2018-09-09T00:00:00-03:00","relpermalink":"/tutorial/dwr2/","section":"tutorial","summary":" Topics/slides  Review and functions\n Loops\n Apply family\n Intro to Tidyverse, strings and REGEX manipulation with stringr\n Dates with lubridate\n Data wrangling with dplyr\n Two table verbs in dplyr\n Accessing SQL databases with dbplyr\n Graphics with ggplot2\n  ","tags":null,"title":"Data Analysis with R (II) - Intermediary Level","type":"docs"},{"authors":null,"categories":["R"],"content":" This is an example of how to scrape Google News with the awesome rvest package.\nThis work is a solution for a question that appeared in our WhatsApp group, blackbeltR. A user came up with this problem and I decided to help him. It was a cool challenge, so why not?\nA great deal of the basic ideas comes from his own code. I just kept it and added few things in order to get the code working.\nFirst off, you should take a look at the Google News website HERE, which I reproduce below:\nYou may notice, on the right side of the page, that we are using Google Chrome dev-tools. We use this to identify the html nodes we need. You can access this tool by hitting the F12 key. The html nodes are passed as arguments to the rvest functions.\nBasically, the idea is to extract the communication vehicle (vehicle), the time elapsed since the news was published (time), and the main headline (headline).\nThe code and coments are presented below:\n# loading the packages: library(dplyr) # for pipes and the data_frame function library(rvest) # webscraping library(stringr) # to deal with strings and to clean up our data # extracting the whole website google \u0026lt;- read_html(\u0026quot;https://news.google.com/\u0026quot;) # extracting the com vehicles # we pass the nodes in html_nodes and extract the text from the last one # we use stringr to delete strings that are not important vehicle_all \u0026lt;- google %\u0026gt;% html_nodes(\u0026quot;div div div main c-wiz div div div article div div div\u0026quot;) %\u0026gt;% html_text() %\u0026gt;% str_subset(\u0026quot;[^more_vert]\u0026quot;) %\u0026gt;% str_subset(\u0026quot;[^share]\u0026quot;) %\u0026gt;% str_subset(\u0026quot;[^bookmark_border]\u0026quot;) vehicle_all[1:10] # take a look at the first ten ## [1] \u0026quot;CNN\u0026quot; \u0026quot;Fox News\u0026quot; \u0026quot;The Washington Post\u0026quot; ## [4] \u0026quot;The New York Times\u0026quot; \u0026quot;Opinion\u0026quot; \u0026quot;Opinion\u0026quot; ## [7] \u0026quot;Fox News\u0026quot; \u0026quot;Opinion\u0026quot; \u0026quot;Opinion\u0026quot; ## [10] \u0026quot;Fox News\u0026quot; # extracting the time elapsed time_all \u0026lt;- google %\u0026gt;% html_nodes(\u0026quot;div article div div time\u0026quot;) %\u0026gt;% html_text() time_all[1:10] # take a look at the first ten ## [1] \u0026quot;2 hours ago\u0026quot; \u0026quot;4 hours ago\u0026quot; \u0026quot;2 hours ago\u0026quot; \u0026quot;today\u0026quot; ## [5] \u0026quot;today\u0026quot; \u0026quot;2 hours ago\u0026quot; \u0026quot;4 hours ago\u0026quot; \u0026quot;2 hours ago\u0026quot; ## [9] \u0026quot;today\u0026quot; \u0026quot;one hour ago\u0026quot; # extracting the headlines # and using stringr for cleaning headline_all \u0026lt;- google %\u0026gt;% html_nodes(\u0026quot;article\u0026quot;) %\u0026gt;% html_text(\u0026quot;span\u0026quot;) %\u0026gt;% str_split(\u0026quot;(?\u0026lt;=[a-z0-9!?\\\\.])(?=[A-Z])\u0026quot;) headline_all \u0026lt;- sapply(headline_all, function(x) x[1]) # extract only the first elements headline_all[1:10] # take a look at the first ten ## [1] \u0026quot;The \u0026#39;lonely\u0026#39; President: How Trump spent his Christmas vacation\u0026quot; ## [2] \u0026quot;Trump tells congressional leaders to return Friday, after border security sit-down in Situation Room\u0026quot; ## [3] \u0026quot;Trump falsely claims Mexico is paying for wall, demands taxpayer money for wall in meeting with Democrats\u0026quot; ## [4] \u0026quot;Trump’s Shutdown Is Not About Border Security\u0026quot; ## [5] \u0026quot;Doug Schoen: Democrats have Trump backed into a corner as 2019 kicks off\u0026quot; ## [6] \u0026quot;Romney, answering critics, says country \u0026#39;is as divided as ever\u0026#39; since Trump presidency\u0026quot; ## [7] \u0026quot;Trump fires back at Mitt Romney for scathing op-ed\u0026quot; ## [8] \u0026quot;Mitt Romney details what bothers him about Trumpvideo_youtube\u0026quot; ## [9] \u0026quot;Mitt Romney’s Counterproductive Op-Ed\u0026quot; ## [10] \u0026quot;Mitt Romney vs. Donald Trump: If Utah’s New Senator Is Serious, He Should Be Running for President\u0026quot; In this last case we used a regular expression (REGEX) to clean up the data. We did this by separating the actual headline phrases from the complementary ones. In some cases, we have a phrase ending with uppercase letters such as “NSA” (The National Security Agency) collapsed with other phrase initiating with another uppercase letter such as the article “A” (“…with NSAA agent said…”) for example. We have to think of a better way to split these cases, but the current result is quite satisfactory for now.\nThe expression ?\u0026lt;= is called “lookbehind”, while ?= is called “lookahead”. Those “lookaround” expressions allow us to look for patterns followed or preceded by something. In our case, the idea is to separate a string at the point in which lowercase letters, numbers, exclamation points, dots or question marks are collapsed with uppercase letters , e.g. where lowercase letters, numbers and others ([a-z0-9'!?\\\\.]) are followed (?\u0026lt;=) by uppercase letters or where uppercase letters ([A-Z]) are preceded (?=) by lowercase letters.\nBefore we finish, we have to clean up our data. It is common to collect garbage in the process such as data related to “fact checking”, which is a section on the right side of the page. As a result, it is possible that the three vectors we have created may have different sizes. Therefore, we use the smallest of them as the base and just delete the entries above this number on the other two vectors.\n# finding the smallest vector min \u0026lt;- min(sapply(list(vehicle_all, time_all, headline_all), length)) # cutting vehicle_all \u0026lt;- vehicle_all[1:min] time_all \u0026lt;- time_all[1:min] headline_all \u0026lt;- headline_all[1:min] And we have our final data frame:\ndf_news \u0026lt;- data_frame(vehicle_all, time_all, headline_all) df_news ## # A tibble: 166 x 3 ## vehicle_all time_all headline_all ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 CNN 2 hours a… The \u0026#39;lonely\u0026#39; President: How Trump spent hi… ## 2 Fox News 4 hours a… Trump tells congressional leaders to retur… ## 3 The Washington … 2 hours a… Trump falsely claims Mexico is paying for … ## 4 The New York Ti… today Trump’s Shutdown Is Not About Border Secur… ## 5 Opinion today Doug Schoen: Democrats have Trump backed i… ## 6 Opinion 2 hours a… Romney, answering critics, says country \u0026#39;i… ## 7 Fox News 4 hours a… Trump fires back at Mitt Romney for scathi… ## 8 Opinion 2 hours a… Mitt Romney details what bothers him about… ## 9 Opinion today Mitt Romney’s Counterproductive Op-Ed ## 10 Fox News one hour … Mitt Romney vs. Donald Trump: If Utah’s Ne… ## # ... with 156 more rows ","date":1534903994,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1534903994,"objectID":"7239dc358fb85f7317669dc444a7ca90","permalink":"/post/googlenews_web-scraping/2018-08-21-google_news_scraping/","publishdate":"2018-08-21T21:13:14-05:00","relpermalink":"/post/googlenews_web-scraping/2018-08-21-google_news_scraping/","section":"post","summary":"This is an example of how to scrape Google News with the awesome rvest package.\nThis work is a solution for a question that appeared in our WhatsApp group, blackbeltR. A user came up with this problem and I decided to help him. It was a cool challenge, so why not?\nA great deal of the basic ideas comes from his own code. I just kept it and added few things in order to get the code working.","tags":["rvest","web scraping","GoogleNews"],"title":"Scraping Google News with 'rvest'","type":"post"},{"authors":[],"categories":null,"content":"Click on the Slides button above to view the built-in slides feature.\n Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using url_slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1483236000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483236000,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"/talk/example/","publishdate":"2017-01-01T00:00:00-02:00","relpermalink":"/talk/example/","section":"talk","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam.","tags":[],"title":"Example Talk","type":"talk"},{"authors":null,"categories":null,"content":" About FisFa (or Fiscaliza Fatura) is a software developed in R and a little bit in Python. Its aim is to automate contract management tasks in Fies - the Brazilian Higher Education Fund. Previously to FisFa, contract invoices from banks used to take more than two weeks to be analyzed. After FisFa, the time has drop to roughly 1 minute. The quality of the analysis also has increadibly improved. After the analysis, FisFa provides the user with several reports about the invoice and also indicates possible errors in data. The whole process became highly robust, which is extremely desirable since the monthly values of the invoices usually are beyond US$5 million. Due to monthly errors found by FisFa in invoices, the Brazilian Government saved more than US$50 million since 2016 until now.\nAwards As a recognition for the incredible results aforementioned, FisFa received two awards:\n Standout Project in Contract Management. 4th ANGC Aeards - Best Initiatives Of The Year on Contract Mangement, Sep. 2018.\n 1st Place Strengthening Internal Controls in the Public Administration. CGU\u0026rsquo;s 4th Good Practices Award, Dec. 2016.\n  Technical details FisFa is mainly programmed in R. It is divided in specific functions for each contract and a main function to manage these other functions. One of the great things (in my opinion) about FisFa is the fact that its GUI is made with gtk+ 2 inside R, which is possible because of the great package RGtk2. It runs like a Windowns application. We use Rscript to do this. We choose an extension to the GUI file and tell Windows to run it always with \u0026ldquo;RScript.exe\u0026rdquo;. So, it basically runs as an executable file.\nThe Python part was used only to hide the functions from users, which are not versed in R, so they are not able to commit any critical change to the core files by mistake. The communication between the R code and Python code is made using Rserve and svScokets on the R side and pyRserve on the Python side. The functions are kept in the cloud and the Python code gets them in the beginning of each session and load them into the R Global Environment.\nLicense FisFa is registered under the Brazilian Patent BR 51 2016 000212 3.\n","date":1480557600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1480557600,"objectID":"3f5be21aa5cf49e396e7bd032c346313","permalink":"/project/internal-fisfa/","publishdate":"2016-12-01T00:00:00-02:00","relpermalink":"/project/internal-fisfa/","section":"project","summary":"A Software for Contract Management","tags":["other"],"title":"FisFa","type":"project"},{"authors":null,"categories":null,"content":"","date":1461726000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461726000,"objectID":"c39d37c9f9dbb4f58316a82ae4ab6003","permalink":"/statsr/external-cat_data/","publishdate":"2016-04-27T00:00:00-03:00","relpermalink":"/statsr/external-cat_data/","section":"statsr","summary":"Some traditional examples of `Categorical Data Analysis` involving Logistic Regression, Multicategory Logit Models, Log-linear models, and others.","tags":["catdata","log-reg","logit","log-lin"],"title":"Categorical Data Analysis","type":"statsr"},{"authors":null,"categories":null,"content":"","date":1461726000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461726000,"objectID":"eb15b11a3328623b82db0505c99a12d1","permalink":"/statsr/external-slide_tcc2/","publishdate":"2016-04-27T00:00:00-03:00","relpermalink":"/statsr/external-slide_tcc2/","section":"statsr","summary":"A method for finding the number k of clusters in data, which I proposed as my senior thesis in Statistics. It contains interactive `plotly` graphics that only runs well with **Chrome**.","tags":["ml","unspvd_lrng","cluster","ccc","mst","pareto"],"title":"Clustering Algorithm","type":"statsr"},{"authors":null,"categories":null,"content":"","date":1461726000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461726000,"objectID":"eb7298264c79764a6d51a0c311313a6a","permalink":"/statsr/external-irt/","publishdate":"2016-04-27T00:00:00-03:00","relpermalink":"/statsr/external-irt/","section":"statsr","summary":"Some assignments and solutions on the `Item Response Theory` subject.","tags":["irt"],"title":"Item Response Theory","type":"statsr"},{"authors":null,"categories":null,"content":"","date":1461726000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461726000,"objectID":"60018df5c16cf30a06398a178da0ba07","permalink":"/statsr/external-slide_or/","publishdate":"2016-04-27T00:00:00-03:00","relpermalink":"/statsr/external-slide_or/","section":"statsr","summary":"A slide deck about `Operations Research`. It contains interactive `googleVis` objects that only runs well with **Mozilla**.","tags":["or"],"title":"Operations Research","type":"statsr"},{"authors":null,"categories":null,"content":"","date":1461726000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461726000,"objectID":"213ce3d598d9272809daadcc6ec9233d","permalink":"/statsr/external-slide_stochastic_pro/","publishdate":"2016-04-27T00:00:00-03:00","relpermalink":"/statsr/external-slide_stochastic_pro/","section":"statsr","summary":"A presentation about `brownnian motion` and one of its applications in the Financial Market via the `Black \u0026 Scholes model`. It contains interactive `googleVis` objects that only runs well with **Mozilla**.","tags":["finance","brwn_mot","stochastic","blk\u0026schl"],"title":"Stochastic Processes","type":"statsr"},{"authors":null,"categories":null,"content":"","date":1461726000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461726000,"objectID":"0764f5b4f0e426ad585c83fc1d2eac26","permalink":"/statsr/external-time/","publishdate":"2016-04-27T00:00:00-03:00","relpermalink":"/statsr/external-time/","section":"statsr","summary":"Some assignments and solutions on the `Time Series Analysis` subject.","tags":["time"],"title":"Time Series Analysis","type":"statsr"},{"authors":null,"categories":null,"content":"","date":1461726000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461726000,"objectID":"48a2f3be448270f44b76d53b9dfe989e","permalink":"/project/external-emstreer/","publishdate":"2016-04-27T00:00:00-03:00","relpermalink":"/project/external-emstreer/","section":"project","summary":"An R Package for Fast Computing `Euclidean Minimum Spanning Trees`.","tags":["r-packages"],"title":"emstreeR","type":"project"},{"authors":["GA Cushen"],"categories":null,"content":"More detail can easily be written here using Markdown and $\\rm \\LaTeX$ math code.\n","date":1441076400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441076400,"objectID":"d77fa4a74076ffcd7ca6c21cfc27a4b2","permalink":"/publication/person-re-id/","publishdate":"2015-09-01T00:00:00-03:00","relpermalink":"/publication/person-re-id/","section":"publication","summary":"Person re-identification is a critical security task for recognizing a person across spatially disjoint sensors. Previous work can be computationally intensive and is mainly based on low-level cues extracted from RGB data and implemented on a PC for a fixed sensor network (such as traditional CCTV). We present a practical and efficient framework for mobile devices (such as smart phones and robots) where high-level semantic soft biometrics are extracted from RGB and depth data. By combining these cues, our approach attempts to provide robustness to noise, illumination, and minor variations in clothing. This mobile approach may be particularly useful for the identification of persons in areas ill-served by fixed sensors or for tasks where the sensor position and direction need to dynamically adapt to a target. Results on the BIWI dataset are preliminary but encouraging. Further evaluation and demonstration of the system will be available on our website.","tags":[],"title":"A Person Re-Identification System For Mobile Devices","type":"publication"},{"authors":["GA Cushen","MS Nixon"],"categories":null,"content":"More detail can easily be written here using Markdown and $\\rm \\LaTeX$ math code.\n","date":1372647600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372647600,"objectID":"2b4d919e3cf73dfcd0063c88fe01cb00","permalink":"/publication/clothing-search/","publishdate":"2013-07-01T00:00:00-03:00","relpermalink":"/publication/clothing-search/","section":"publication","summary":"We present a mobile visual clothing search system whereby a smart phone user can either choose a social networking photo or take a new photo of a person wearing clothing of interest and search for similar clothing in a retail database. From the query image, the person is detected, clothing is segmented, and clothing features are extracted and quantized. The information is sent from the phone client to a server, where the feature vector of the query image is used to retrieve similar clothing products from online databases. The phone's GPS location is used to re-rank results by retail store location. State of the art work focuses primarily on the recognition of a diverse range of clothing offline and pays little attention to practical applications. Evaluated on a challenging dataset, the system is relatively fast and achieves promising results.","tags":[],"title":"Mobile visual clothing search","type":"publication"},{"authors":null,"categories":null,"content":" Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c2915ec5da95791851caafdcba9664af","permalink":"/slides/example-slides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/example-slides/","section":"slides","summary":"Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$","tags":null,"title":"Slides","type":"slides"}]