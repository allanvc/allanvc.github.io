<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ALLAN V. C. QUADROS on ALLAN V. C. QUADROS</title>
    <link>/</link>
    <description>Recent content in ALLAN V. C. QUADROS on ALLAN V. C. QUADROS</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2019 Allan V. C. Quadros</copyright>
    <lastBuildDate>Thu, 22 Aug 2019 17:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>&#39;mRpostman&#39; - IMAP Tools for R in a Tidy Way</title>
      <link>/post/new_package_mrpostman/2019-08-20-new_package_mrpostman/</link>
      <pubDate>Thu, 22 Aug 2019 17:00:00 +0000</pubDate>
      
      <guid>/post/new_package_mrpostman/2019-08-20-new_package_mrpostman/</guid>
      <description>


&lt;center&gt;
&lt;img alt = &#39;hexlogo&#39; width=&#39;200&#39; src=&#39;/post/new_package_mRpostman/2019-08-20-new_package_mRpostman_files/logo.png&#39; /&gt;
&lt;/center&gt;
&lt;p&gt;&lt;strong&gt;mRpostman&lt;/strong&gt; is an R package to help you to easy connect to your IMAP (Internet Message Access Protocol) server and execute commands, such as listing mailboxes, fetching and searching for messages in a tidy way. It calls ‘curl’ in background when issuing the IMAP commands (all credit to Jeroen Ooms and Daniel Stenberg).&lt;/p&gt;
&lt;p&gt;So far, I have tested &lt;strong&gt;mRpostman&lt;/strong&gt; with Gmail, Yahoo Mail and AOL Mail, but it should also work with other mail providers. I would be happy to hear other successful experiences from users.&lt;/p&gt;
&lt;p&gt;ATTENTION: Before you start, you have to enable &lt;strong&gt;“less secure apps access”&lt;/strong&gt; in your mail account settings.&lt;/p&gt;
&lt;p&gt;There is a detailed vignette &lt;a href=&#34;https://allanvc.github.io/mRpostman/articles/basics.html&#34;&gt;HERE&lt;/a&gt; showing how to use the package!&lt;/p&gt;
&lt;p&gt;I hope you enjoy &lt;strong&gt;mRpostman&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Official website: &lt;a href=&#34;https://allanvc.github.io/mRpostman&#34; class=&#34;uri&#34;&gt;https://allanvc.github.io/mRpostman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CRAN version: &lt;a href=&#34;https://cran.r-project.org/package=mRpostman&#34; class=&#34;uri&#34;&gt;https://cran.r-project.org/package=mRpostman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dev version: &lt;a href=&#34;https://github.com/allanvc/mRpostman&#34; class=&#34;uri&#34;&gt;https://github.com/allanvc/mRpostman&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>mRpostman</title>
      <link>/project/external-mrpostman/</link>
      <pubDate>Sat, 17 Aug 2019 00:00:00 -0300</pubDate>
      
      <guid>/project/external-mrpostman/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Data Analysis in the Public Sector</title>
      <link>/talk/talk_ds_fnde/</link>
      <pubDate>Wed, 03 Jul 2019 00:00:00 -0300</pubDate>
      
      <guid>/talk/talk_ds_fnde/</guid>
      <description>&lt;!-- &lt;div class=&#34;alert alert-note&#34;&gt;
  
Click on the **Slides** button above to view the built-in slides feature.

&lt;/div&gt;


Slides can be added in a few ways:

- **Create** slides using Academic&#39;s *Slides* feature and link using `url_slides` parameter in the front matter of the talk file
- **Upload** an existing slide deck to `static/` and link using `url_slides` parameter in the front matter of the talk file
- **Embed** your slides (e.g. Google Slides) or presentation video on this page using [shortcodes](https://sourcethemes.com/academic/docs/writing-markdown-latex/).

Further talk details can easily be added to this page using *Markdown* and $\rm \LaTeX$ math code.
--&gt;
</description>
    </item>
    
    <item>
      <title>Announcing the new &#39;emstreeR&#39; package</title>
      <link>/post/new_package_emstreer/2018-12-10-new_package_emstreer/</link>
      <pubDate>Mon, 10 Dec 2018 21:13:14 -0500</pubDate>
      
      <guid>/post/new_package_emstreer/2018-12-10-new_package_emstreer/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/plotly-binding/plotly.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/typedarray/typedarray.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/crosstalk/css/crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/plotly-htmlwidgets-css/plotly-htmlwidgets.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/plotly-main/plotly-latest.min.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I am proud to announce &lt;strong&gt;emstreeR&lt;/strong&gt; - my first &lt;strong&gt;R&lt;/strong&gt; package available on CRAN.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;emstreeR&lt;/strong&gt; is a package for fast and easily computing Euclidean Minimum Spanning Trees (EMST). It heavily relies on RcppMLPACK and Rcpp to work as wrapper to the EMST Dual-Tree Boruvka algorithm (March, Ram, Gray, 2010) implemented in ‘mlpack’ - the C++ Machine Learning library (Curtin et al., 2013). With ‘emstreeR’, R users have access to the C++ fast EMST algorithm without having to deal with the R-Rcpp-C++ integration. The package also provides functions and an S3 method for readily plotting the Minimum Spanning Trees (MST) using either ‘base’, ‘scatterplot3d’ or ‘ggplot2’ style.&lt;/p&gt;
&lt;p&gt;Working with ‘emstreeR’ is easy because you just have to pass a matrix or data.frame of points as an argument to the main function &lt;code&gt;computeMST()&lt;/code&gt; in order to get things working.&lt;/p&gt;
&lt;p&gt;But, before we begin, what exactly is a Minimum Spanning Tree?&lt;/p&gt;
&lt;p&gt;I will try to explain that without bringing any graph concept to the discussion.&lt;/p&gt;
&lt;p&gt;Imagine you have to connect a group of South American cities with pipelines in order to distribute the natural gas extracted from an offshore platform on the coast of Rio de Janeiro. To optimize your operations, you need to know the most efficient route, e.g. the route that connects all the cities within the minimum distance possible. That optimal route between the cities is a Minimum Spanning Tree. Therefore, the MST problem is, in its essence, an optimization problem.&lt;/p&gt;
&lt;p&gt;The distances between the points can be calculated using various methods, such as Manhattan, Euclidean, Minkowski, etc. ‘emstreeR’ uses Euclidean distances. Hence, the name Euclidean Minimum Spanning Trees.&lt;/p&gt;
&lt;p&gt;So, let’s try to reproduce the aforementioned example.&lt;/p&gt;
&lt;p&gt;First, we are going to use the package ‘ggmap’. We will pass the cities names as arguments and then get their latitude and longitude coordinates, using the Data Science Toolkit repository (&lt;code&gt;source = &amp;quot;dsk&amp;quot;&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggmap)

## cities:
cities_location &amp;lt;- data.frame(location = c(&amp;quot;Passo Fundo, Brazil&amp;quot;, 
                                            &amp;quot;Buenos Aires, Argentina&amp;quot;,
                                            &amp;quot;Assuncion, Paraguay&amp;quot;,
                                            &amp;quot;Campinas, Brazil&amp;quot;,
                                            &amp;quot;Cubatao, Brazil&amp;quot;,
                                            &amp;quot;Mendoza, Argentina&amp;quot;,
                                            &amp;quot;Corrientes, Argentina&amp;quot;,
                                            &amp;quot;Porto Velho, Brazil&amp;quot;,
                                            &amp;quot;Manaus, Brazil&amp;quot;,
                                            &amp;quot;Santa Cruz de La Sierra, Bolivia&amp;quot;,
                                            &amp;quot;Belo Horizonte, Brazil&amp;quot;,
                                            &amp;quot;Brasília, Brazil&amp;quot;,
                                            &amp;quot;Rio de Janeiro, Brazil&amp;quot;,
                                            &amp;quot;Campo Grande, Brazil&amp;quot;,
                                            &amp;quot;Recife, Brazil&amp;quot;
                                            ), 
                                stringsAsFactors = FALSE)
    
## get latitude and longitude
geo_location &amp;lt;- geocode(cities_location$location, source = &amp;quot;dsk&amp;quot;)
    
## combine data:
df_location &amp;lt;- cbind(cities_location, geo_location)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s plot the map, so we can have an initial notion about what we are dealing with.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# coordinates for South America
map_grid &amp;lt;- c(left = -80, bottom = -40, right = -20, top = 0) 

library(dplyr) # we wanna use pipes

get_stamenmap(map_grid, zoom = 5) %&amp;gt;% ggmap()+
  geom_point(data = df_location,
           aes(x = lon, y = lat), size=2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/new_package_emstreeR/2018-12-10-new_package_emstreeR_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now is when &lt;strong&gt;emstreeR&lt;/strong&gt; comes in handy. We pass the point columns as argument to &lt;code&gt;computeMST()&lt;/code&gt; and it calculates the minimum route connecting all the points, e.g. the Euclidean Minimum Spanning Tree.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## MST:
library(emstreeR)
out &amp;lt;- ComputeMST(df_location[,2:3])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 9 edges found so far.
## 210 cumulative base cases.
## 0 cumulative node combinations scored.
## 12 edges found so far.
## 394 cumulative base cases.
## 0 cumulative node combinations scored.
## 14 edges found so far.
## 542 cumulative base cases.
## 0 cumulative node combinations scored.
## Total spanning tree length: 10.012&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;out&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          lon       lat from to  distance
## 1  -52.40667 -28.26278    4  5 0.1275521
## 2  -60.00000 -36.00000    3  7 0.2702386
## 3  -57.63591 -25.30066   11 13 0.3350650
## 4  -47.06083 -22.90556    5 13 0.3591768
## 5  -46.42528 -23.89500    3 14 0.6189752
## 6  -68.82717 -32.89084   11 12 0.6207409
## 7  -58.83410 -27.48060    1  3 0.6437908
## 8  -63.90389  -8.76194    8  9 0.7437005
## 9  -60.02500  -3.10194    1  5 0.7956373
## 10 -63.18117 -17.78629    2  7 0.9394038
## 11 -43.93778 -19.92083   10 14 0.9534939
## 12 -47.92972 -15.77972    8 10 0.9893601
## 13 -43.20750 -22.90278    2  6 0.9989068
## 14 -54.64639 -20.44278   11 15 1.6159137
## 15 -34.88111  -8.05389    1  1 0.0000000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a result, we have a data.frame containing our original data and three more columns: from, to, and distance. This information is the Minimum Spanning Tree and will be used for plotting.&lt;/p&gt;
&lt;p&gt;You can silence the output of the algorithm by setting &lt;code&gt;verbose=FALSE&lt;/code&gt; in &lt;code&gt;computeMST()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To better visualize the result, we plot the map again, but now using the ggplot2’s extension provided in ‘emstreeR’: &lt;code&gt;stat_MST()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Plot:
# we use the same grid map    
get_stamenmap(map_grid, zoom = 5) %&amp;gt;% ggmap()+
  stat_MST(data = out,
           aes(x = lon, y = lat, from=from, to=to), 
           colour=&amp;quot;red&amp;quot;, linetype = 2)+
  geom_point(data = out, aes(x = lon, y = lat), size=3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/new_package_emstreeR/2018-12-10-new_package_emstreeR_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Once you have the information about the minimum route, it is easy to see that you will have to install gas distribution hubs in cities that will have more than two incoming or outgoing links, such as Assuncion in Paraguay. Based on that information or other criteria such as connectivity or even by cutting the largest edge, you can also define or separate regions of operations. What I mean by this is that you can also use Minimum Spanning Trees in clustering problems. Nonetheless, let’s save that topic for another post.&lt;/p&gt;
&lt;p&gt;Below, I will present other things you can do with ‘emstreeR’.&lt;/p&gt;
&lt;p&gt;‘emstreeR’ provides an S3 method for the ‘base’ function &lt;code&gt;plot()&lt;/code&gt;. It is easy to make simple 2D plots with that.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## artifical data for 2D plots:
set.seed(1984)
n &amp;lt;- 15
c1 &amp;lt;- data.frame(x = rnorm(n,-0.2, sd=0.2), y = rnorm(n,-2,sd=0.2))
c2 &amp;lt;- data.frame(x = rnorm(n,-1.1, sd=0.15), y = rnorm(n,-2,sd=0.3)) 
d &amp;lt;- rbind(c1, c2)
d &amp;lt;- as.data.frame(d)
  
## MST:
#library(emstreeR)
out &amp;lt;- ComputeMST(d, verbose = FALSE)  &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## simple 2D plot:
plot(out, col.pts = &amp;quot;red&amp;quot;, col.segts = &amp;quot;blue&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/new_package_emstreeR/2018-12-10-new_package_emstreeR_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;stat_MST()&lt;/code&gt; extension also makes it easy plotting 2D plots, but using ‘ggplot2’ as we showed before.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## 2D plot with ggplot2:
library(ggplot2)
ggplot(data = out, aes(x = x, y = y, from = from, to = to))+ 
  geom_point()+ 
  stat_MST(colour=&amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/new_package_emstreeR/2018-12-10-new_package_emstreeR_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you want something fancier, you can use the &lt;code&gt;geom=curve&lt;/code&gt; argument:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## 2D plot with ggplot2:
#library(ggplot2)
ggplot(data = out, aes(x = x, y = y, from=from, to=to))+ 
  geom_point()+ 
  stat_MST(geom=&amp;quot;curve&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/new_package_emstreeR/2018-12-10-new_package_emstreeR_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can also make 3D MST plots with ‘emstreeR’. It provides a wrapper for plotting 3D scatter plots, using the ‘scatterplot3d’ package.&lt;/p&gt;
&lt;p&gt;Let’s create 3D artificial data and compute the MST.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## artificial data for 3D plots:
n = 99
set.seed(1984)
d1&amp;lt;-matrix(rnorm(n,mean=-2,sd=.5), n/3, 3) # 3d
d2&amp;lt;-matrix(rnorm(n,mean=0,sd=.3), n/3, 3)
d3&amp;lt;-matrix(rnorm(n,mean=3,sd=.4), n/3, 3)
d&amp;lt;-rbind(d1,d2,d3) # just to show a matrix input
  
## MST:
library(emstreeR)
out &amp;lt;- ComputeMST(d, verbose = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can do a simple 3D plot using the function &lt;code&gt;plotMST3D()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## simple 3D plot:
plotMST3D(out, xlab = &amp;quot;xaxis&amp;quot;, main=&amp;quot;Just a MST 3D plot&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/new_package_emstreeR/2018-12-10-new_package_emstreeR_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;But, again, if you like fancier plots, we can also make an interactive 3D MST plot using ‘plotly’:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# some adjusts needed
ord_id &amp;lt;- Reduce(rbind, rbind(t(out[, c(&amp;quot;from&amp;quot;, &amp;quot;to&amp;quot;)]), NA))

ord_data &amp;lt;- out[ord_id, c(&amp;quot;X1&amp;quot;, &amp;quot;X2&amp;quot;, &amp;quot;X3&amp;quot;)]
ord_data &amp;lt;- as.data.frame(ord_data)


library(dplyr) # we wanna use pipes
library(plotly)

plot_ly(showlegend = T) %&amp;gt;%
  add_markers(data=ord_data, x = ~X1, y = ~X2, z = ~X3, 
              marker=list(opacity=0.5), size = I(3.5), name=&amp;quot;points&amp;quot;) %&amp;gt;%
  add_paths(data=ord_data, x = ~X1, y = ~X2, z = ~X3, 
            color = I(&amp;quot;red&amp;quot;), name=&amp;quot;edges&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:768px;height:384px;&#34; class=&#34;plotly html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;visdat&#34;:{&#34;b24946526503&#34;:[&#34;function () &#34;,&#34;plotlyVisDat&#34;],&#34;b2497716de13&#34;:[&#34;function () &#34;,&#34;data&#34;],&#34;b249282ea349&#34;:[&#34;function () &#34;,&#34;data&#34;]},&#34;cur_data&#34;:&#34;b249282ea349&#34;,&#34;attrs&#34;:{&#34;b2497716de13&#34;:{&#34;showlegend&#34;:true,&#34;alpha_stroke&#34;:1,&#34;sizes&#34;:[10,100],&#34;spans&#34;:[1,20],&#34;x&#34;:{},&#34;y&#34;:{},&#34;z&#34;:{},&#34;type&#34;:&#34;scatter3d&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;opacity&#34;:0.5},&#34;size&#34;:[3.5],&#34;name&#34;:&#34;points&#34;,&#34;inherit&#34;:true},&#34;b249282ea349&#34;:{&#34;showlegend&#34;:true,&#34;alpha_stroke&#34;:1,&#34;sizes&#34;:[10,100],&#34;spans&#34;:[1,20],&#34;x&#34;:{},&#34;y&#34;:{},&#34;z&#34;:{},&#34;type&#34;:&#34;scatter3d&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;color&#34;:[&#34;red&#34;],&#34;name&#34;:&#34;edges&#34;,&#34;inherit&#34;:true}},&#34;layout&#34;:{&#34;margin&#34;:{&#34;b&#34;:40,&#34;l&#34;:60,&#34;t&#34;:25,&#34;r&#34;:10},&#34;scene&#34;:{&#34;xaxis&#34;:{&#34;title&#34;:&#34;X1&#34;},&#34;yaxis&#34;:{&#34;title&#34;:&#34;X2&#34;},&#34;zaxis&#34;:{&#34;title&#34;:&#34;X3&#34;}},&#34;hovermode&#34;:&#34;closest&#34;,&#34;showlegend&#34;:true},&#34;source&#34;:&#34;A&#34;,&#34;config&#34;:{&#34;modeBarButtonsToAdd&#34;:[{&#34;name&#34;:&#34;Collaborate&#34;,&#34;icon&#34;:{&#34;width&#34;:1000,&#34;ascent&#34;:500,&#34;descent&#34;:-50,&#34;path&#34;:&#34;M487 375c7-10 9-23 5-36l-79-259c-3-12-11-23-22-31-11-8-22-12-35-12l-263 0c-15 0-29 5-43 15-13 10-23 23-28 37-5 13-5 25-1 37 0 0 0 3 1 7 1 5 1 8 1 11 0 2 0 4-1 6 0 3-1 5-1 6 1 2 2 4 3 6 1 2 2 4 4 6 2 3 4 5 5 7 5 7 9 16 13 26 4 10 7 19 9 26 0 2 0 5 0 9-1 4-1 6 0 8 0 2 2 5 4 8 3 3 5 5 5 7 4 6 8 15 12 26 4 11 7 19 7 26 1 1 0 4 0 9-1 4-1 7 0 8 1 2 3 5 6 8 4 4 6 6 6 7 4 5 8 13 13 24 4 11 7 20 7 28 1 1 0 4 0 7-1 3-1 6-1 7 0 2 1 4 3 6 1 1 3 4 5 6 2 3 3 5 5 6 1 2 3 5 4 9 2 3 3 7 5 10 1 3 2 6 4 10 2 4 4 7 6 9 2 3 4 5 7 7 3 2 7 3 11 3 3 0 8 0 13-1l0-1c7 2 12 2 14 2l218 0c14 0 25-5 32-16 8-10 10-23 6-37l-79-259c-7-22-13-37-20-43-7-7-19-10-37-10l-248 0c-5 0-9-2-11-5-2-3-2-7 0-12 4-13 18-20 41-20l264 0c5 0 10 2 16 5 5 3 8 6 10 11l85 282c2 5 2 10 2 17 7-3 13-7 17-13z m-304 0c-1-3-1-5 0-7 1-1 3-2 6-2l174 0c2 0 4 1 7 2 2 2 4 4 5 7l6 18c0 3 0 5-1 7-1 1-3 2-6 2l-173 0c-3 0-5-1-8-2-2-2-4-4-4-7z m-24-73c-1-3-1-5 0-7 2-2 3-2 6-2l174 0c2 0 5 0 7 2 3 2 4 4 5 7l6 18c1 2 0 5-1 6-1 2-3 3-5 3l-174 0c-3 0-5-1-7-3-3-1-4-4-5-6z&#34;},&#34;click&#34;:&#34;function(gd) { \n        // is this being viewed in RStudio?\n        if (location.search == &#39;?viewer_pane=1&#39;) {\n          alert(&#39;To learn about plotly for collaboration, visit:\\n https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;);\n        } else {\n          window.open(&#39;https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;, &#39;_blank&#39;);\n        }\n      }&#34;}],&#34;cloud&#34;:false},&#34;data&#34;:[{&#34;showlegend&#34;:true,&#34;x&#34;:[-0.046713997513217,-0.0685584940589797,0.0636074523580962,-0.00492205832117027,-0.395165647986004,-0.338570358785818,-1.5231763172966,-1.48803277042085,-0.197465890442984,-0.221835581916721,-0.197465890442984,-0.088286578247603,-1.85603314195385,-1.93962909731372,2.72518283465451,2.70200862769584,-0.107678397422481,-0.24732438085378,2.55596867744861,2.62735439608887,-0.218114224139469,-0.338570358785818,-0.046713997513217,-0.00492205832117027,-1.93692723569359,-2.00660906988694,-1.79539839189242,-1.93962909731372,2.90073887995543,2.74921084263877,2.70200862769584,2.82873384658181,-0.107678397422481,-0.088286578247603,2.72289967526452,2.56314210846198,-0.105609564616152,-0.0300148956776743,-0.105609564616152,-0.00492205832117027,-1.68207383640494,-1.54830300957135,0.372878991847474,0.286793539853064,-0.0366242892683186,-0.107678397422481,-0.218114224139469,-0.0685584940589797,-0.218114224139469,-0.188783796323926,3.05374072519382,3.25938370901499,2.91713685665477,2.78878827336018,-1.48803277042085,-1.54830300957135,-0.188783796323926,-0.401680655198066,3.05374072519382,2.94814702917937,-1.78512969269477,-1.87624114096369,-2.41636271488956,-2.55379344470451,-0.218114224139469,-0.24732438085378,2.56314210846198,2.58361949719777,0.116599929387485,-0.0685584940589797,0.116599929387485,0.285498424971517,2.70200862769584,2.58361949719777,2.48208562339008,2.56314210846198,-0.163375780065643,-0.0366242892683186,-0.395165647986004,-0.377391271422537,-1.79539839189242,-1.58147587487362,2.90073887995543,2.97975273701916,-0.354646956289946,-0.459122503570025,3.3485939832916,3.32146840272461,-1.58885767575268,-1.69708132679065,-1.5231763172966,-1.29200862111695,-0.339581988149387,-0.377391271422537,-1.68207383640494,-1.93692723569359,-2.16151248557708,-2.41636271488956,-2.16151248557708,-2.26310394224839,0.0636074523580962,0.31712203950271,2.58361949719777,2.78878827336018,-2.00660906988694,-1.87624114096369,2.54403167570144,2.48208562339008,0.116599929387485,0.286793539853064,2.74921084263877,2.58362894595548,-0.0366242892683186,0.174216907589974,3.05203026997513,2.82873384658181,0.0636074523580962,0.14240468806414,-1.5231763172966,-1.40575507827367,3.32146840272461,3.07828143229178,-0.395165647986004,-0.354646956289946,-1.85603314195385,-1.99112745192653,2.55596867744861,2.62003663164955,2.62003663164955,2.78878827336018,-1.68207383640494,-1.85899449805446,-2.26310394224839,-1.93962909731372,2.99868638485847,2.65791757532538,-1.37902171592439,-1.54830300957135,2.58362894595548,2.82873384658181,2.90073887995543,3.07828143229178,3.3485939832916,3.4121379560553,3.81853973829928,4.09293862946261,2.72289967526452,2.65791757532538,0.286793539853064,0.251537470418265,-0.339581988149387,-0.00325777899527525,3.05374072519382,3.07828143229178,-2.88778024442006,-2.73521208864277,3.35094011067944,3.05203026997513,-1.72877277541825,-1.93692723569359,-2.16151248557708,-1.78512969269477,-1.29200862111695,-1.13800299183489,-1.85899449805446,-1.58885767575268,-1.78512969269477,-1.95414092498558,-0.264029726473329,-0.401680655198066,3.81853973829928,3.4121379560553,0.696834584277854,0.285498424971517,-1.99112745192653,-1.49600575521992,2.88604037485881,2.97975273701916,-2.26310394224839,-2.73521208864277,-1.99112745192653,-2.29315430233772,2.57064823116706,2.65791757532538,3.11218296657133,2.54403167570144,-2.85687894026298,-2.32430796488639,-2.85687894026298,-2.55379344470451,-2.92306439200917,-2.73521208864277,-1.49600575521992,-0.264029726473329,0.31712203950271,2.54403167570144,-1.79539839189242,-1.79539839189242],&#34;y&#34;:[0.145101255533289,0.0760594177763837,0.288205838712991,0.257949712998362,-0.00431927279800628,-0.0716412935998873,-2.14425553128117,-2.22838754896476,-0.0299338621614169,-0.066384045433591,-0.0299338621614169,-0.021413190578135,-1.37932956573783,-1.44567165559502,2.65351319858374,2.74120722862281,-0.179702063070925,-0.206890216383374,3.57423773792872,3.7128099574064,-0.05942965168387,-0.0716412935998873,0.145101255533289,0.257949712998362,-2.31501040397909,-2.41208440052755,-1.52185053590828,-1.44567165559502,2.66942114290125,2.74736975358472,2.74120722862281,2.82905082002061,-0.179702063070925,-0.021413190578135,3.04805961440217,2.93909147783109,0.167284211116258,0.255717680895006,0.167284211116258,0.257949712998362,-2.42701417815477,-2.3241297794636,0.272682763508783,0.0839550187496657,-0.280329198324527,-0.179702063070925,-0.05942965168387,0.0760594177763837,-0.05942965168387,-0.272803975699384,3.37368778996681,3.4350578029584,3.29138318002123,3.13075294444178,-2.22838754896476,-2.3241297794636,-0.272803975699384,-0.327196477107268,3.37368778996681,3.29336836261454,-2.19013892159155,-2.34473099905127,-1.97526183010415,-2.16606526218669,-0.05942965168387,-0.206890216383374,2.93909147783109,2.97920178887571,-0.0469207224192381,0.0760594177763837,-0.0469207224192381,-0.125750758665957,2.74120722862281,2.97920178887571,2.68473350897271,2.93909147783109,-0.500219977660278,-0.280329198324527,-0.00431927279800628,0.0366831180675923,-1.52185053590828,-1.40779181724364,2.66942114290125,2.42965245812497,0.266308839760768,0.505643273320174,2.89119488705872,2.766886163577,-2.36865012312408,-2.14137335716712,-2.14425553128117,-2.05480587732028,0.0312052224166501,0.0366831180675923,-2.42701417815477,-2.31501040397909,-1.85116701834483,-1.97526183010415,-1.85116701834483,-1.59950667387064,0.288205838712991,0.24935937855356,2.97920178887571,3.13075294444178,-2.41208440052755,-2.34473099905127,2.83296210006876,2.68473350897271,-0.0469207224192381,0.0839550187496657,2.74736975358472,2.89306515176021,-0.280329198324527,-0.151543201261912,2.83452996461008,2.82905082002061,0.288205838712991,0.578612201165647,-2.14425553128117,-2.1707085838591,2.766886163577,2.95698519842931,-0.00431927279800628,0.266308839760768,-1.37932956573783,-1.42556397669975,3.57423773792872,3.34335880787618,3.34335880787618,3.13075294444178,-2.42701417815477,-2.66959608174581,-1.59950667387064,-1.44567165559502,3.41984905664545,3.3676663977988,-2.58840363769649,-2.3241297794636,2.89306515176021,2.82905082002061,2.66942114290125,2.95698519842931,2.89119488705872,3.00248578883163,3.37856205772373,3.19706871875853,3.04805961440217,3.3676663977988,0.0839550187496657,-0.277771306244062,0.0312052224166501,0.206620612071227,3.37368778996681,2.95698519842931,-1.37832242020558,-1.19174696907868,2.50252738532356,2.83452996461008,-1.8783472427296,-2.31501040397909,-1.85116701834483,-2.19013892159155,-2.05480587732028,-2.33326069464062,-2.66959608174581,-2.36865012312408,-2.19013892159155,-2.00828804444381,-0.792558950880535,-0.327196477107268,3.37856205772373,3.00248578883163,-0.529830818415005,-0.125750758665957,-1.42556397669975,-1.16704751001735,1.95530044689826,2.42965245812497,-1.59950667387064,-1.19174696907868,-1.42556397669975,-1.67322368565353,4.04522161453655,3.3676663977988,2.5409356526667,2.83296210006876,-2.48712881172095,-2.78290190120894,-2.48712881172095,-2.16606526218669,-0.74782312581342,-1.19174696907868,-1.16704751001735,-0.792558950880535,0.24935937855356,2.83296210006876,-1.52185053590828,-1.52185053590828],&#34;z&#34;:[0.0568800284146869,0.088059363643747,-0.0862372551098345,-0.0519641604635114,-0.0919282248250674,-0.0905806756935537,-2.25418469784249,-2.24310186413887,0.342791270305189,0.442468595340893,0.342791270305189,0.330242955312922,-2.19429643620777,-2.22836547790316,2.77041372999585,2.84650789321635,0.236468008935428,0.204817142203963,3.40435289628272,3.39759851097787,0.0138002539866289,-0.0905806756935537,0.0568800284146869,-0.0519641604635114,-1.92054685990701,-2.0390325783709,-2.27001423351884,-2.22836547790316,3.40114446794371,3.3923698646119,2.84650789321635,2.92859903451418,0.236468008935428,0.330242955312922,2.57972950059037,2.56644040467547,-0.199721930085373,-0.357697330900803,-0.199721930085373,-0.0519641604635114,-1.94292458189748,-2.05442238354669,-0.267271311471426,-0.224711843463383,0.411808309432311,0.236468008935428,0.0138002539866289,0.088059363643747,0.0138002539866289,-0.0246294116976458,3.29220749351495,3.27339942330727,2.86905399876499,2.94729082015457,-2.24310186413887,-2.05442238354669,-0.0246294116976458,-0.0280887797890447,3.29220749351495,3.47543993422796,-2.441559592838,-2.29155162963517,-2.27609597386725,-2.21794027643834,0.0138002539866289,0.204817142203963,2.56644040467547,2.80643328446387,-0.024405483210775,0.088059363643747,-0.024405483210775,0.161909415999245,2.84650789321635,2.80643328446387,2.52899359447085,2.56644040467547,0.322563387862346,0.411808309432311,-0.0919282248250674,-0.356435365562294,-2.27001423351884,-2.38248383064026,3.40114446794371,3.5106367015107,0.0808611145792359,0.173673765633308,2.96922193776979,3.21449753227233,-1.41522955348519,-1.29752153576632,-2.25418469784249,-2.13490360821276,-0.633177495160734,-0.356435365562294,-1.94292458189748,-1.92054685990701,-2.31475984151011,-2.27609597386725,-2.31475984151011,-2.21064844752997,-0.0862372551098345,0.0415248458424777,2.80643328446387,2.94729082015457,-2.0390325783709,-2.29155162963517,2.2821092550466,2.52899359447085,-0.024405483210775,-0.224711843463383,3.3923698646119,3.19380274902531,0.411808309432311,0.575669253953099,2.73278181051865,2.92859903451418,-0.0862372551098345,-0.12611480372421,-2.25418469784249,-2.5374685060403,3.21449753227233,3.24513528905641,-0.0919282248250674,0.0808611145792359,-2.19429643620777,-1.90245228729336,3.40435289628272,3.17041466130825,3.17041466130825,2.94729082015457,-1.94292458189748,-1.75248353669171,-2.21064844752997,-2.22836547790316,2.46424262025308,2.36825985381468,-2.23603606715923,-2.05442238354669,3.19380274902531,2.92859903451418,3.40114446794371,3.24513528905641,2.96922193776979,2.6215858474234,2.73910871835619,2.56080012694023,2.57972950059037,2.36825985381468,-0.224711843463383,-0.411974258326592,-0.633177495160734,-0.773078844062943,3.29220749351495,3.24513528905641,-2.72468800986234,-2.37962525058802,2.64349006849316,2.73278181051865,-1.85008969381723,-1.92054685990701,-2.31475984151011,-2.441559592838,-2.13490360821276,-1.7191315741103,-1.75248353669171,-1.41522955348519,-2.441559592838,-2.92032273797414,-0.324029847522204,-0.0280887797890447,2.73910871835619,2.6215858474234,-0.026841463398261,0.161909415999245,-1.90245228729336,-1.63157821822375,3.10594671433657,3.5106367015107,-2.21064844752997,-2.37962525058802,-1.90245228729336,-1.37824248095622,2.56074770504139,2.36825985381468,1.94190797251289,2.2821092550466,-1.41433193911949,-0.887949351939884,-1.41433193911949,-2.21794027643834,-1.55021513302471,-2.37962525058802,-1.63157821822375,-0.324029847522204,0.0415248458424777,2.2821092550466,-2.27001423351884,-2.27001423351884],&#34;type&#34;:&#34;scatter3d&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;color&#34;:&#34;rgba(31,119,180,1)&#34;,&#34;size&#34;:[3.5],&#34;sizemode&#34;:&#34;area&#34;,&#34;opacity&#34;:0.5,&#34;line&#34;:{&#34;color&#34;:&#34;rgba(31,119,180,1)&#34;}},&#34;name&#34;:&#34;points&#34;,&#34;textfont&#34;:{&#34;size&#34;:3.5},&#34;error_y&#34;:{&#34;color&#34;:&#34;rgba(31,119,180,1)&#34;,&#34;width&#34;:3.5},&#34;error_x&#34;:{&#34;color&#34;:&#34;rgba(31,119,180,1)&#34;,&#34;width&#34;:3.5},&#34;line&#34;:{&#34;color&#34;:&#34;rgba(31,119,180,1)&#34;,&#34;width&#34;:3.5},&#34;frame&#34;:null},{&#34;showlegend&#34;:true,&#34;x&#34;:[-0.046713997513217,-0.0685584940589797,null,0.0636074523580962,-0.00492205832117027,null,-0.395165647986004,-0.338570358785818,null,-1.5231763172966,-1.48803277042085,null,-0.197465890442984,-0.221835581916721,null,-0.197465890442984,-0.088286578247603,null,-1.85603314195385,-1.93962909731372,null,2.72518283465451,2.70200862769584,null,-0.107678397422481,-0.24732438085378,null,2.55596867744861,2.62735439608887,null,-0.218114224139469,-0.338570358785818,null,-0.046713997513217,-0.00492205832117027,null,-1.93692723569359,-2.00660906988694,null,-1.79539839189242,-1.93962909731372,null,2.90073887995543,2.74921084263877,null,2.70200862769584,2.82873384658181,null,-0.107678397422481,-0.088286578247603,null,2.72289967526452,2.56314210846198,null,-0.105609564616152,-0.0300148956776743,null,-0.105609564616152,-0.00492205832117027,null,-1.68207383640494,-1.54830300957135,null,0.372878991847474,0.286793539853064,null,-0.0366242892683186,-0.107678397422481,null,-0.218114224139469,-0.0685584940589797,null,-0.218114224139469,-0.188783796323926,null,3.05374072519382,3.25938370901499,null,2.91713685665477,2.78878827336018,null,-1.48803277042085,-1.54830300957135,null,-0.188783796323926,-0.401680655198066,null,3.05374072519382,2.94814702917937,null,-1.78512969269477,-1.87624114096369,null,-2.41636271488956,-2.55379344470451,null,-0.218114224139469,-0.24732438085378,null,2.56314210846198,2.58361949719777,null,0.116599929387485,-0.0685584940589797,null,0.116599929387485,0.285498424971517,null,2.70200862769584,2.58361949719777,null,2.48208562339008,2.56314210846198,null,-0.163375780065643,-0.0366242892683186,null,-0.395165647986004,-0.377391271422537,null,-1.79539839189242,-1.58147587487362,null,2.90073887995543,2.97975273701916,null,-0.354646956289946,-0.459122503570025,null,3.3485939832916,3.32146840272461,null,-1.58885767575268,-1.69708132679065,null,-1.5231763172966,-1.29200862111695,null,-0.339581988149387,-0.377391271422537,null,-1.68207383640494,-1.93692723569359,null,-2.16151248557708,-2.41636271488956,null,-2.16151248557708,-2.26310394224839,null,0.0636074523580962,0.31712203950271,null,2.58361949719777,2.78878827336018,null,-2.00660906988694,-1.87624114096369,null,2.54403167570144,2.48208562339008,null,0.116599929387485,0.286793539853064,null,2.74921084263877,2.58362894595548,null,-0.0366242892683186,0.174216907589974,null,3.05203026997513,2.82873384658181,null,0.0636074523580962,0.14240468806414,null,-1.5231763172966,-1.40575507827367,null,3.32146840272461,3.07828143229178,null,-0.395165647986004,-0.354646956289946,null,-1.85603314195385,-1.99112745192653,null,2.55596867744861,2.62003663164955,null,2.62003663164955,2.78878827336018,null,-1.68207383640494,-1.85899449805446,null,-2.26310394224839,-1.93962909731372,null,2.99868638485847,2.65791757532538,null,-1.37902171592439,-1.54830300957135,null,2.58362894595548,2.82873384658181,null,2.90073887995543,3.07828143229178,null,3.3485939832916,3.4121379560553,null,3.81853973829928,4.09293862946261,null,2.72289967526452,2.65791757532538,null,0.286793539853064,0.251537470418265,null,-0.339581988149387,-0.00325777899527525,null,3.05374072519382,3.07828143229178,null,-2.88778024442006,-2.73521208864277,null,3.35094011067944,3.05203026997513,null,-1.72877277541825,-1.93692723569359,null,-2.16151248557708,-1.78512969269477,null,-1.29200862111695,-1.13800299183489,null,-1.85899449805446,-1.58885767575268,null,-1.78512969269477,-1.95414092498558,null,-0.264029726473329,-0.401680655198066,null,3.81853973829928,3.4121379560553,null,0.696834584277854,0.285498424971517,null,-1.99112745192653,-1.49600575521992,null,2.88604037485881,2.97975273701916,null,-2.26310394224839,-2.73521208864277,null,-1.99112745192653,-2.29315430233772,null,2.57064823116706,2.65791757532538,null,3.11218296657133,2.54403167570144,null,-2.85687894026298,-2.32430796488639,null,-2.85687894026298,-2.55379344470451,null,-2.92306439200917,-2.73521208864277,null,-1.49600575521992,-0.264029726473329,null,0.31712203950271,2.54403167570144,null,-1.79539839189242,-1.79539839189242],&#34;y&#34;:[0.145101255533289,0.0760594177763837,null,0.288205838712991,0.257949712998362,null,-0.00431927279800628,-0.0716412935998873,null,-2.14425553128117,-2.22838754896476,null,-0.0299338621614169,-0.066384045433591,null,-0.0299338621614169,-0.021413190578135,null,-1.37932956573783,-1.44567165559502,null,2.65351319858374,2.74120722862281,null,-0.179702063070925,-0.206890216383374,null,3.57423773792872,3.7128099574064,null,-0.05942965168387,-0.0716412935998873,null,0.145101255533289,0.257949712998362,null,-2.31501040397909,-2.41208440052755,null,-1.52185053590828,-1.44567165559502,null,2.66942114290125,2.74736975358472,null,2.74120722862281,2.82905082002061,null,-0.179702063070925,-0.021413190578135,null,3.04805961440217,2.93909147783109,null,0.167284211116258,0.255717680895006,null,0.167284211116258,0.257949712998362,null,-2.42701417815477,-2.3241297794636,null,0.272682763508783,0.0839550187496657,null,-0.280329198324527,-0.179702063070925,null,-0.05942965168387,0.0760594177763837,null,-0.05942965168387,-0.272803975699384,null,3.37368778996681,3.4350578029584,null,3.29138318002123,3.13075294444178,null,-2.22838754896476,-2.3241297794636,null,-0.272803975699384,-0.327196477107268,null,3.37368778996681,3.29336836261454,null,-2.19013892159155,-2.34473099905127,null,-1.97526183010415,-2.16606526218669,null,-0.05942965168387,-0.206890216383374,null,2.93909147783109,2.97920178887571,null,-0.0469207224192381,0.0760594177763837,null,-0.0469207224192381,-0.125750758665957,null,2.74120722862281,2.97920178887571,null,2.68473350897271,2.93909147783109,null,-0.500219977660278,-0.280329198324527,null,-0.00431927279800628,0.0366831180675923,null,-1.52185053590828,-1.40779181724364,null,2.66942114290125,2.42965245812497,null,0.266308839760768,0.505643273320174,null,2.89119488705872,2.766886163577,null,-2.36865012312408,-2.14137335716712,null,-2.14425553128117,-2.05480587732028,null,0.0312052224166501,0.0366831180675923,null,-2.42701417815477,-2.31501040397909,null,-1.85116701834483,-1.97526183010415,null,-1.85116701834483,-1.59950667387064,null,0.288205838712991,0.24935937855356,null,2.97920178887571,3.13075294444178,null,-2.41208440052755,-2.34473099905127,null,2.83296210006876,2.68473350897271,null,-0.0469207224192381,0.0839550187496657,null,2.74736975358472,2.89306515176021,null,-0.280329198324527,-0.151543201261912,null,2.83452996461008,2.82905082002061,null,0.288205838712991,0.578612201165647,null,-2.14425553128117,-2.1707085838591,null,2.766886163577,2.95698519842931,null,-0.00431927279800628,0.266308839760768,null,-1.37932956573783,-1.42556397669975,null,3.57423773792872,3.34335880787618,null,3.34335880787618,3.13075294444178,null,-2.42701417815477,-2.66959608174581,null,-1.59950667387064,-1.44567165559502,null,3.41984905664545,3.3676663977988,null,-2.58840363769649,-2.3241297794636,null,2.89306515176021,2.82905082002061,null,2.66942114290125,2.95698519842931,null,2.89119488705872,3.00248578883163,null,3.37856205772373,3.19706871875853,null,3.04805961440217,3.3676663977988,null,0.0839550187496657,-0.277771306244062,null,0.0312052224166501,0.206620612071227,null,3.37368778996681,2.95698519842931,null,-1.37832242020558,-1.19174696907868,null,2.50252738532356,2.83452996461008,null,-1.8783472427296,-2.31501040397909,null,-1.85116701834483,-2.19013892159155,null,-2.05480587732028,-2.33326069464062,null,-2.66959608174581,-2.36865012312408,null,-2.19013892159155,-2.00828804444381,null,-0.792558950880535,-0.327196477107268,null,3.37856205772373,3.00248578883163,null,-0.529830818415005,-0.125750758665957,null,-1.42556397669975,-1.16704751001735,null,1.95530044689826,2.42965245812497,null,-1.59950667387064,-1.19174696907868,null,-1.42556397669975,-1.67322368565353,null,4.04522161453655,3.3676663977988,null,2.5409356526667,2.83296210006876,null,-2.48712881172095,-2.78290190120894,null,-2.48712881172095,-2.16606526218669,null,-0.74782312581342,-1.19174696907868,null,-1.16704751001735,-0.792558950880535,null,0.24935937855356,2.83296210006876,null,-1.52185053590828,-1.52185053590828],&#34;z&#34;:[0.0568800284146869,0.088059363643747,null,-0.0862372551098345,-0.0519641604635114,null,-0.0919282248250674,-0.0905806756935537,null,-2.25418469784249,-2.24310186413887,null,0.342791270305189,0.442468595340893,null,0.342791270305189,0.330242955312922,null,-2.19429643620777,-2.22836547790316,null,2.77041372999585,2.84650789321635,null,0.236468008935428,0.204817142203963,null,3.40435289628272,3.39759851097787,null,0.0138002539866289,-0.0905806756935537,null,0.0568800284146869,-0.0519641604635114,null,-1.92054685990701,-2.0390325783709,null,-2.27001423351884,-2.22836547790316,null,3.40114446794371,3.3923698646119,null,2.84650789321635,2.92859903451418,null,0.236468008935428,0.330242955312922,null,2.57972950059037,2.56644040467547,null,-0.199721930085373,-0.357697330900803,null,-0.199721930085373,-0.0519641604635114,null,-1.94292458189748,-2.05442238354669,null,-0.267271311471426,-0.224711843463383,null,0.411808309432311,0.236468008935428,null,0.0138002539866289,0.088059363643747,null,0.0138002539866289,-0.0246294116976458,null,3.29220749351495,3.27339942330727,null,2.86905399876499,2.94729082015457,null,-2.24310186413887,-2.05442238354669,null,-0.0246294116976458,-0.0280887797890447,null,3.29220749351495,3.47543993422796,null,-2.441559592838,-2.29155162963517,null,-2.27609597386725,-2.21794027643834,null,0.0138002539866289,0.204817142203963,null,2.56644040467547,2.80643328446387,null,-0.024405483210775,0.088059363643747,null,-0.024405483210775,0.161909415999245,null,2.84650789321635,2.80643328446387,null,2.52899359447085,2.56644040467547,null,0.322563387862346,0.411808309432311,null,-0.0919282248250674,-0.356435365562294,null,-2.27001423351884,-2.38248383064026,null,3.40114446794371,3.5106367015107,null,0.0808611145792359,0.173673765633308,null,2.96922193776979,3.21449753227233,null,-1.41522955348519,-1.29752153576632,null,-2.25418469784249,-2.13490360821276,null,-0.633177495160734,-0.356435365562294,null,-1.94292458189748,-1.92054685990701,null,-2.31475984151011,-2.27609597386725,null,-2.31475984151011,-2.21064844752997,null,-0.0862372551098345,0.0415248458424777,null,2.80643328446387,2.94729082015457,null,-2.0390325783709,-2.29155162963517,null,2.2821092550466,2.52899359447085,null,-0.024405483210775,-0.224711843463383,null,3.3923698646119,3.19380274902531,null,0.411808309432311,0.575669253953099,null,2.73278181051865,2.92859903451418,null,-0.0862372551098345,-0.12611480372421,null,-2.25418469784249,-2.5374685060403,null,3.21449753227233,3.24513528905641,null,-0.0919282248250674,0.0808611145792359,null,-2.19429643620777,-1.90245228729336,null,3.40435289628272,3.17041466130825,null,3.17041466130825,2.94729082015457,null,-1.94292458189748,-1.75248353669171,null,-2.21064844752997,-2.22836547790316,null,2.46424262025308,2.36825985381468,null,-2.23603606715923,-2.05442238354669,null,3.19380274902531,2.92859903451418,null,3.40114446794371,3.24513528905641,null,2.96922193776979,2.6215858474234,null,2.73910871835619,2.56080012694023,null,2.57972950059037,2.36825985381468,null,-0.224711843463383,-0.411974258326592,null,-0.633177495160734,-0.773078844062943,null,3.29220749351495,3.24513528905641,null,-2.72468800986234,-2.37962525058802,null,2.64349006849316,2.73278181051865,null,-1.85008969381723,-1.92054685990701,null,-2.31475984151011,-2.441559592838,null,-2.13490360821276,-1.7191315741103,null,-1.75248353669171,-1.41522955348519,null,-2.441559592838,-2.92032273797414,null,-0.324029847522204,-0.0280887797890447,null,2.73910871835619,2.6215858474234,null,-0.026841463398261,0.161909415999245,null,-1.90245228729336,-1.63157821822375,null,3.10594671433657,3.5106367015107,null,-2.21064844752997,-2.37962525058802,null,-1.90245228729336,-1.37824248095622,null,2.56074770504139,2.36825985381468,null,1.94190797251289,2.2821092550466,null,-1.41433193911949,-0.887949351939884,null,-1.41433193911949,-2.21794027643834,null,-1.55021513302471,-2.37962525058802,null,-1.63157821822375,-0.324029847522204,null,0.0415248458424777,2.2821092550466,null,-2.27001423351884,-2.27001423351884],&#34;type&#34;:&#34;scatter3d&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;name&#34;:&#34;edges&#34;,&#34;marker&#34;:{&#34;color&#34;:&#34;rgba(255,0,0,1)&#34;,&#34;line&#34;:{&#34;color&#34;:&#34;rgba(255,0,0,1)&#34;}},&#34;textfont&#34;:{&#34;color&#34;:&#34;rgba(255,0,0,1)&#34;},&#34;error_y&#34;:{&#34;color&#34;:&#34;rgba(255,0,0,1)&#34;},&#34;error_x&#34;:{&#34;color&#34;:&#34;rgba(255,0,0,1)&#34;},&#34;line&#34;:{&#34;color&#34;:&#34;rgba(255,0,0,1)&#34;},&#34;frame&#34;:null}],&#34;highlight&#34;:{&#34;on&#34;:&#34;plotly_click&#34;,&#34;persistent&#34;:false,&#34;dynamic&#34;:false,&#34;selectize&#34;:false,&#34;opacityDim&#34;:0.2,&#34;selected&#34;:{&#34;opacity&#34;:1},&#34;debounce&#34;:0},&#34;base_url&#34;:&#34;https://plot.ly&#34;},&#34;evals&#34;:[&#34;config.modeBarButtonsToAdd.0.click&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;And that’s it! I hope you enjoy &lt;strong&gt;emstreeR&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CRAN version: &lt;a href=&#34;https://cran.r-project.org/package=emstreeR&#34; class=&#34;uri&#34;&gt;https://cran.r-project.org/package=emstreeR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dev version: &lt;a href=&#34;https://github.com/allanvc/emstreeR&#34; class=&#34;uri&#34;&gt;https://github.com/allanvc/emstreeR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;div id=&#34;references&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;p&gt;March, W. B., and Ram, P., and Gray, A. G. (2010). &lt;em&gt;Fast euclidian minimum
spanning tree: algorithm analysis, and applications&lt;/em&gt;. 16th ACM SIGKDD
International Conference on Knowledge Discovery and Data mining, July
25-28 2010. Washington, DC, USA. &lt;a href=&#34;doi:10.1145/1835804.1835882&#34; class=&#34;uri&#34;&gt;doi:10.1145/1835804.1835882&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Curtin, R. R. et al. (2013). Mlpack: A scalable C++ machine learning
library. &lt;em&gt;Journal of Machine Learning Research&lt;/em&gt;, v. 14, 2013.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Analysis with R (I) - Introductory Level</title>
      <link>/tutorial/dwr1/</link>
      <pubDate>Sun, 09 Sep 2018 00:00:00 -0300</pubDate>
      
      <guid>/tutorial/dwr1/</guid>
      <description>

&lt;h3 id=&#34;topics-slides&#34;&gt;Topics/slides&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://allanvc.github.io/courses_FNDE/M1s1&amp;amp;2/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Intro &amp;amp; first steps&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://allanvc.github.io/courses_FNDE/M1s3/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;R Objects creation and manipulation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://allanvc.github.io/courses_FNDE/M1s4/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Logical operators and control statements&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://allanvc.github.io/courses_FNDE/M1s5/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Base R graphics&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://allanvc.github.io/courses_FNDE/M1s6/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Read, manipulate and write data&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Final assignment (not available)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Data Analysis with R (II) - Intermediate Level</title>
      <link>/tutorial/dwr2/</link>
      <pubDate>Sun, 09 Sep 2018 00:00:00 -0300</pubDate>
      
      <guid>/tutorial/dwr2/</guid>
      <description>

&lt;h3 id=&#34;topics-slides&#34;&gt;Topics/slides&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://allanvc.github.io/courses_FNDE/M2s1/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Review and functions&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://allanvc.github.io/courses_FNDE/M2s2/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Loops&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://allanvc.github.io/courses_FNDE/M2s3/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Apply family&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://allanvc.github.io/courses_FNDE/M2s4/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Intro to Tidyverse, strings and REGEX manipulation with &lt;code&gt;stringr&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://allanvc.github.io/courses_FNDE/M2s5/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Dates with &lt;code&gt;lubridate&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://allanvc.github.io/courses_FNDE/M2s6/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Data wrangling with &lt;code&gt;dplyr&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://allanvc.github.io/courses_FNDE/M2s7/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Two table verbs in &lt;code&gt;dplyr&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://allanvc.github.io/courses_FNDE/M2s8/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Accessing SQL databases with &lt;code&gt;dbplyr&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://allanvc.github.io/courses_FNDE/M2s9/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Graphics with &lt;code&gt;ggplot2&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>emstreeR</title>
      <link>/project/external-emstreer/</link>
      <pubDate>Thu, 30 Aug 2018 00:00:00 -0300</pubDate>
      
      <guid>/project/external-emstreer/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Scraping Google News with &#39;rvest&#39;</title>
      <link>/post/googlenews_web-scraping/2018-08-21-google_news_scraping/</link>
      <pubDate>Tue, 21 Aug 2018 21:13:14 -0500</pubDate>
      
      <guid>/post/googlenews_web-scraping/2018-08-21-google_news_scraping/</guid>
      <description>


&lt;p&gt;This is an example of how to scrape Google News with the awesome &lt;code&gt;rvest&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;This post is a solution for a question from our WhatsApp group, &lt;a href=&#34;https://www.blackbeltR.com.br/blog&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;blackbeltR&lt;/strong&gt;&lt;/a&gt;. A user came up with this problem and I decided to help him. It was a cool challenge, so why not?&lt;/p&gt;
&lt;p&gt;A great deal of the basic ideas comes from his own code. I just kept it and added few things in order to get the code working.&lt;/p&gt;
&lt;p&gt;First off, you should take a look at the Google News website &lt;a href=&#34;https://news.google.com/&#34; target=&#34;_blank&#34;&gt;HERE&lt;/a&gt;, which I reproduce below:&lt;/p&gt;
&lt;!-- ![](/post/web-scrap/![](/web-scrap/2018-08-21-google_news_scraping_files/google_news_screenshot.png)2018-08-21-google_news_scraping_files/google_news_screenshot.png) --&gt;
&lt;p&gt;&lt;img src=&#34;/post/googlenews_web-scraping/2018-08-21-google_news_scraping_files/google_news_screenshot.png&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;You may notice, on the right side of the page, that we are using Google Chrome &lt;strong&gt;dev-tools&lt;/strong&gt;. We use this to identify the &lt;em&gt;html nodes&lt;/em&gt; we need. You can access this tool by hitting the &lt;strong&gt;F12&lt;/strong&gt; key. The html nodes are passed as arguments to the &lt;code&gt;rvest&lt;/code&gt; functions.&lt;/p&gt;
&lt;p&gt;Basically, the idea is to extract the communication vehicle (vehicle), the time elapsed since the news was published (time), and the main headline (headline).&lt;/p&gt;
&lt;p&gt;The code and coments are presented below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# loading the packages:
library(dplyr) # for pipes and the data_frame function
library(rvest) # webscraping
library(stringr) # to deal with strings and to clean up our data&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# extracting the whole website
google &amp;lt;- read_html(&amp;quot;https://news.google.com/&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# extracting the com vehicles
# we pass the nodes in html_nodes and extract the text from the last one 
# we use stringr to delete strings that are not important
vehicle_all &amp;lt;- google %&amp;gt;% 
  html_nodes(&amp;quot;div div div main c-wiz div div div article div div div&amp;quot;) %&amp;gt;% 
  html_text() %&amp;gt;%
  str_subset(&amp;quot;[^more_vert]&amp;quot;) %&amp;gt;%
  str_subset(&amp;quot;[^share]&amp;quot;) %&amp;gt;%
  str_subset(&amp;quot;[^bookmark_border]&amp;quot;)

vehicle_all[1:10] # take a look at the first ten&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;The New York Times&amp;quot;  &amp;quot;Vox.com&amp;quot;             &amp;quot;Wall Street Journal&amp;quot;
##  [4] &amp;quot;The New York Times&amp;quot;  &amp;quot;Opinion&amp;quot;             &amp;quot;Opinion&amp;quot;            
##  [7] &amp;quot;The Washington Post&amp;quot; &amp;quot;Opinion&amp;quot;             &amp;quot;Opinion&amp;quot;            
## [10] &amp;quot;CNN&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# extracting the time elapsed
time_all &amp;lt;- google %&amp;gt;% html_nodes(&amp;quot;div article div div time&amp;quot;) %&amp;gt;% html_text()

time_all[1:10] # take a look at the first ten&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;2 hours ago&amp;quot;  &amp;quot;today&amp;quot;        &amp;quot;4 hours ago&amp;quot;  &amp;quot;yesterday&amp;quot;   
##  [5] &amp;quot;yesterday&amp;quot;    &amp;quot;2 hours ago&amp;quot;  &amp;quot;today&amp;quot;        &amp;quot;one hour ago&amp;quot;
##  [9] &amp;quot;one hour ago&amp;quot; &amp;quot;today&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# extracting the headlines
# and using stringr for cleaning
headline_all &amp;lt;- google %&amp;gt;% html_nodes(&amp;quot;article&amp;quot;) %&amp;gt;% html_text(&amp;quot;span&amp;quot;) %&amp;gt;%
  str_split(&amp;quot;(?&amp;lt;=[a-z0-9!?\\.])(?=[A-Z])&amp;quot;)
  # str_split(&amp;quot;(?&amp;lt;=[a-z0-9áéíóú!?\\.])(?=[A-Z])&amp;quot;) # for Google News in Portuguese

headline_all &amp;lt;- sapply(headline_all, function(x) x[1]) # extract only the first elements


headline_all[1:10] # take a look at the first ten&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;As Government Reopens, the New Congress Tries to Begin Again&amp;quot;                              
##  [2] &amp;quot;Government shutdown 2.0: Trump is willing to do it, Mick Mulvaney says&amp;quot;                    
##  [3] &amp;quot;Federal Employees Head Back to Work With Payday Still Uncertain&amp;quot;                           
##  [4] &amp;quot;Opinion | The Real Wall Isn&amp;#39;t at the Border&amp;quot;                                               
##  [5] &amp;quot;Analysis | Why the shutdown ended — and what to watch for now&amp;quot;                             
##  [6] &amp;quot;Kamala Harris officially launches 2020 presidential campaign&amp;quot;                              
##  [7] &amp;quot;Extramarital affair with Kamala Harris? Former San Francisco mayor, 84, admits it happened&amp;quot;
##  [8] &amp;quot;Kamala Harris hits Trump, promises progressive change in presidential campaign kick-off&amp;quot;   
##  [9] &amp;quot;Kamala Harris emerges as a 2020 front-runner, but is that a good thing?&amp;quot;                   
## [10] &amp;quot;Will Kamala Harris have the support of black women? Don&amp;#39;t assume that&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this last case we used a regular expression (REGEX) to clean up the data. We did this by separating the actual headline phrases from the complementary ones. In some cases, we have a phrase ending with uppercase letters such as “NSA” (The National Security Agency) collapsed with another phrase initiating with a uppercase letter such as the article “A” (“…with NSAA agent said…”) for example. We have to think of a better way to split these cases, but the current result is quite satisfactory for now.&lt;/p&gt;
&lt;p&gt;The expression &lt;code&gt;?&amp;lt;=&lt;/code&gt; is called “lookbehind”, while &lt;code&gt;?=&lt;/code&gt; is called “lookahead”. Those “lookaround” expressions allow us to look for patterns followed or preceded by something. In our case, the idea is to separate a string at the point in which lowercase letters, numbers, exclamation points, periods or question marks are collapsed with uppercase letters , e.g. where lowercase letters, numbers and others (&lt;code&gt;[a-z0-9&#39;!?\\.]&lt;/code&gt;) are followed (&lt;code&gt;?&amp;lt;=&lt;/code&gt;) by uppercase letters or where uppercase letters (&lt;code&gt;[A-Z]&lt;/code&gt;) are preceded (&lt;code&gt;?=&lt;/code&gt;) by lowercase letters.&lt;/p&gt;
&lt;p&gt;Before we finish, we have to clean up our data. It is common to collect garbage in the process such as data related to “fact checking”, which is a section on the right side of the page. As a result, it is possible that the three vectors we have created may have different sizes. Therefore, we use the smallest of them as the base and just delete the entries above this number on the other two vectors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# finding the smallest vector
min &amp;lt;- min(sapply(list(vehicle_all, time_all, headline_all), length))

# cutting
vehicle_all &amp;lt;- vehicle_all[1:min]
time_all &amp;lt;- time_all[1:min]
headline_all &amp;lt;- headline_all[1:min]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we have our final data frame:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_news &amp;lt;- data_frame(vehicle_all, time_all, headline_all)

df_news&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 160 x 3
##    vehicle_all      time_all   headline_all                               
##    &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;                                      
##  1 The New York Ti… 2 hours a… As Government Reopens, the New Congress Tr…
##  2 Vox.com          today      Government shutdown 2.0: Trump is willing …
##  3 Wall Street Jou… 4 hours a… Federal Employees Head Back to Work With P…
##  4 The New York Ti… yesterday  Opinion | The Real Wall Isn&amp;#39;t at the Border
##  5 Opinion          yesterday  Analysis | Why the shutdown ended — and wh…
##  6 Opinion          2 hours a… Kamala Harris officially launches 2020 pre…
##  7 The Washington … today      Extramarital affair with Kamala Harris? Fo…
##  8 Opinion          one hour … Kamala Harris hits Trump, promises progres…
##  9 Opinion          one hour … Kamala Harris emerges as a 2020 front-runn…
## 10 CNN              today      Will Kamala Harris have the support of bla…
## # ... with 150 more rows&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Categorical Data Analysis</title>
      <link>/statsr/external-cat_data/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 -0300</pubDate>
      
      <guid>/statsr/external-cat_data/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Clustering Algorithm</title>
      <link>/statsr/external-slide_tcc2/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 -0300</pubDate>
      
      <guid>/statsr/external-slide_tcc2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Item Response Theory</title>
      <link>/statsr/external-irt/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 -0300</pubDate>
      
      <guid>/statsr/external-irt/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Operations Research</title>
      <link>/statsr/external-slide_or/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 -0300</pubDate>
      
      <guid>/statsr/external-slide_or/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Stochastic Processes</title>
      <link>/statsr/external-slide_stochastic_pro/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 -0300</pubDate>
      
      <guid>/statsr/external-slide_stochastic_pro/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Time Series Analysis</title>
      <link>/statsr/external-time/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 -0300</pubDate>
      
      <guid>/statsr/external-time/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>/privacy/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 -0300</pubDate>
      
      <guid>/privacy/</guid>
      <description>&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
